
.\build\patch/patch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bss          00000090  20063800  20063800  00023800  2**2
                  ALLOC
  1 .otp_data     00004000  10020000  10020000  00010000  2**0
                  ALLOC
  2 .otp_header   0000001c  10024000  10024000  00010000  2**0
                  ALLOC
  3 .txt          0000047c  1002401c  1002401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .otp_patch2   00004000  10024498  10024498  00014498  2**0
                  ALLOC
  5 .otp_patch3   00004000  10028498  10028498  00014498  2**0
                  ALLOC
  6 .debug_info   000229a9  00000000  00000000  00014498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000131a  00000000  00000000  00036e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000ba1  00000000  00000000  0003815b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000110  00000000  00000000  00038cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000198  00000000  00000000  00038e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000b13c  00000000  00000000  00038fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004045  00000000  00000000  000440e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00069eac  00000000  00000000  00048125  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007f  00000000  00000000  000b1fd1  2**0
                  CONTENTS, READONLY
 15 .ARM.attributes 00000031  00000000  00000000  000b2050  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000001e0  00000000  00000000  000b2084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .txt:

1002401c <patch_entry>:
/**
 * This is the patch entry point, which is called after the patch got
 * successfully loaded into RAM.
 */
void patch_entry(void)
{
1002401c:	b510      	push	{r4, lr}
    // Initialize the .bss and .data section
    memset(SECTION_BASE_ZI, 0, SECTION_LENGTH_ZI);
1002401e:	480c      	ldr	r0, [pc, #48]	; (10024050 <patch_entry+0x34>)
10024020:	4a0c      	ldr	r2, [pc, #48]	; (10024054 <patch_entry+0x38>)
10024022:	1a12      	subs	r2, r2, r0
10024024:	2100      	movs	r1, #0
10024026:	f000 f9ed 	bl	10024404 <memset>
    memcpy(SECTION_BASE_RW_DESTINATION, SECTION_BASE_RW_SOURCE, SECTION_LENGTH_RW);
1002402a:	480b      	ldr	r0, [pc, #44]	; (10024058 <patch_entry+0x3c>)
1002402c:	4a0b      	ldr	r2, [pc, #44]	; (1002405c <patch_entry+0x40>)
1002402e:	1a12      	subs	r2, r2, r0
10024030:	490b      	ldr	r1, [pc, #44]	; (10024060 <patch_entry+0x44>)
10024032:	f000 f9a5 	bl	10024380 <memcpy>
    // Initialize ram execution section
    memcpy(SECTION_BASE_RAM_EXEC_DESTINATION, SECTION_BASE_RAM_EXEC_SOURCE, SECTION_LENGTH_RAM_EXEC);
10024036:	480b      	ldr	r0, [pc, #44]	; (10024064 <patch_entry+0x48>)
10024038:	4a0b      	ldr	r2, [pc, #44]	; (10024068 <patch_entry+0x4c>)
1002403a:	1a12      	subs	r2, r2, r0
1002403c:	490b      	ldr	r1, [pc, #44]	; (1002406c <patch_entry+0x50>)
1002403e:	f000 f99f 	bl	10024380 <memcpy>
/* lint requires us to have both a declaration and a definition ... we
 * could probably bail out through some local lint, but her we simply
 * play to the rules.
 */
HAL_INLINE void HAL_SET32(volatile uint32_t* addr, uint32_t val) {
    *addr = val;
10024042:	4a0b      	ldr	r2, [pc, #44]	; (10024070 <patch_entry+0x54>)
10024044:	4b0b      	ldr	r3, [pc, #44]	; (10024074 <patch_entry+0x58>)
10024046:	601a      	str	r2, [r3, #0]


    SCU_SPARE_FF__SET(0x5971BBBBUL);  // write the patch id to SCU spare for simple test that patch loaded
    user_drv_init();
10024048:	f000 f97a 	bl	10024340 <user_drv_init>
}
1002404c:	bd10      	pop	{r4, pc}
1002404e:	46c0      	nop			; (mov r8, r8)
10024050:	20063800 	.word	0x20063800
10024054:	20063890 	.word	0x20063890
10024058:	20063800 	.word	0x20063800
1002405c:	20063800 	.word	0x20063800
10024060:	10024498 	.word	0x10024498
10024064:	20063890 	.word	0x20063890
10024068:	20063890 	.word	0x20063890
1002406c:	10024498 	.word	0x10024498
10024070:	5971bbbb 	.word	0x5971bbbb
10024074:	40000020 	.word	0x40000020

10024078 <add_on_features_init>:
#include "pmbus_mfr_autogen.h"

void add_on_features_init (void)
{
	uint8_t test1 = 0;
}
10024078:	4770      	bx	lr
	...

1002407c <patch_Telemetry_change_scales>:
/**
 * Used to change the vout_scale dependent registers in telemetry and pid blocks, added changes for adjust turn ratio
 * @param loop Selects the loop to operate on.  Valid range of 0 or 1.
 */
void patch_Telemetry_change_scales(PMBUS_PAGE_t loop)
{
1002407c:	b5f0      	push	{r4, r5, r6, r7, lr}
1002407e:	46d6      	mov	lr, sl
10024080:	464f      	mov	r7, r9
10024082:	4646      	mov	r6, r8
10024084:	b5c0      	push	{r6, r7, lr}
10024086:	0005      	movs	r5, r0

	// Get MFR_ADJ_TURN_RATIO value
	uint16_t adj_turnratio_linear11 = PMBUS_Get_Command_Word(loop, PMBUS_CMDCODE_MFR_ADJ_TURN_RATIO);
10024088:	21b1      	movs	r1, #177	; 0xb1
1002408a:	f7dd fae5 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
1002408e:	0542      	lsls	r2, r0, #21
10024090:	0d52      	lsrs	r2, r2, #21
 */
__DRIVER_INLINE int32_t LINEAR11_TO_MANTISSA(uint16_t packed_linear_format_number)
{
	int32_t mant_bits=packed_linear_format_number & 0x07ff;
	int32_t mant_signbit=mant_bits & 0x0400;
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
10024092:	0543      	lsls	r3, r0, #21
10024094:	d477      	bmi.n	10024186 <patch_Telemetry_change_scales+0x10a>
	int32_t mant_bits=packed_linear_format_number & 0x07ff;
10024096:	0013      	movs	r3, r2
 * Takes a linear11 format (16bit, 5bit exponent 11bit mantissa) number
 * and extracts the exponent
 */
__DRIVER_INLINE int32_t LINEAR11_TO_EXPONENT(uint16_t packed_linear_format_number)
{
	int32_t exp_bits=(packed_linear_format_number >> 11) & 0x1f;
10024098:	0ac0      	lsrs	r0, r0, #11
1002409a:	b280      	uxth	r0, r0
	int32_t exp_signbit=exp_bits & 0x0010;
	return ((int32_t) (exp_signbit ? (exp_bits | 0xffffffe0) : exp_bits));
1002409c:	06c2      	lsls	r2, r0, #27
1002409e:	d502      	bpl.n	100240a6 <patch_Telemetry_change_scales+0x2a>
100240a0:	2220      	movs	r2, #32
100240a2:	4252      	negs	r2, r2
100240a4:	4310      	orrs	r0, r2
	uint32_t adj_turnratio_value = (uint32_t)LINEAR11_TO_MANTISSA(adj_turnratio_linear11);
    int32_t adj_turnratio_exponent = LINEAR11_TO_EXPONENT(adj_turnratio_linear11);

    adj_turnratio_value = SHIFT_EXPONENT_UNSIGNED(adj_turnratio_value, (adj_turnratio_exponent+9));  // convert to u1.9 format if not already
100240a6:	0002      	movs	r2, r0
100240a8:	3209      	adds	r2, #9
		exponent = -exponent;
		value = value >> (exponent);
	}
	else
	{
		value = value << (exponent);
100240aa:	001f      	movs	r7, r3
100240ac:	4097      	lsls	r7, r2
	if ( exponent <= 0)
100240ae:	2a00      	cmp	r2, #0
100240b0:	dd6c      	ble.n	1002418c <patch_Telemetry_change_scales+0x110>
    // Clamp to 1 to prevent dividing by zero
    if (adj_turnratio_value == 0) {
100240b2:	2f00      	cmp	r7, #0
100240b4:	d101      	bne.n	100240ba <patch_Telemetry_change_scales+0x3e>
    	adj_turnratio_value = 1 << 9; // convert to u1.9 format if not already
100240b6:	2780      	movs	r7, #128	; 0x80
100240b8:	00bf      	lsls	r7, r7, #2
    }

    // Get MFR_VRECT_SCALE
	uint16_t vrect_scale_linear11 = PMBUS_Get_Command_Word(loop, PMBUS_CMDCODE_MFR_VRECT_SCALE);
100240ba:	21cd      	movs	r1, #205	; 0xcd
100240bc:	0028      	movs	r0, r5
100240be:	f7dd facb 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
100240c2:	0542      	lsls	r2, r0, #21
100240c4:	0d52      	lsrs	r2, r2, #21
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
100240c6:	0543      	lsls	r3, r0, #21
100240c8:	d466      	bmi.n	10024198 <patch_Telemetry_change_scales+0x11c>
	int32_t mant_bits=packed_linear_format_number & 0x07ff;
100240ca:	0013      	movs	r3, r2
	int32_t exp_bits=(packed_linear_format_number >> 11) & 0x1f;
100240cc:	0ac0      	lsrs	r0, r0, #11
100240ce:	b280      	uxth	r0, r0
	return ((int32_t) (exp_signbit ? (exp_bits | 0xffffffe0) : exp_bits));
100240d0:	06c2      	lsls	r2, r0, #27
100240d2:	d502      	bpl.n	100240da <patch_Telemetry_change_scales+0x5e>
100240d4:	2220      	movs	r2, #32
100240d6:	4252      	negs	r2, r2
100240d8:	4310      	orrs	r0, r2
	uint32_t vrect_value = (uint32_t)LINEAR11_TO_MANTISSA(vrect_scale_linear11);
    int32_t exponent = LINEAR11_TO_EXPONENT(vrect_scale_linear11);
	vrect_value = SHIFT_EXPONENT_UNSIGNED(vrect_value, (exponent+12));  // convert to u0.12 format if not already
100240da:	0002      	movs	r2, r0
100240dc:	320c      	adds	r2, #12
		value = value << (exponent);
100240de:	0019      	movs	r1, r3
100240e0:	4091      	lsls	r1, r2
	if ( exponent <= 0)
100240e2:	2a00      	cmp	r2, #0
100240e4:	dd5b      	ble.n	1002419e <patch_Telemetry_change_scales+0x122>

	// ************** TLM_VRECT_SCALE compensation with ADJ_TURNRATIO  **************
	vrect_value = (vrect_value * adj_turnratio_value) >> 9;	// Shift by 9 due to adj_turnratio_value scaling (U1.9)
100240e6:	4379      	muls	r1, r7
100240e8:	0a4b      	lsrs	r3, r1, #9
100240ea:	4698      	mov	r8, r3
 * @param idp index of peripheral
 * @return base address of peripheral's instance
 */
__TELEM_INLINE uint32_t* __TELEM_BASE_PTR(telem_idx_t idp)
{
    return (uint32_t*)(TELEM_BASE + (uint32_t)((uint32_t)idp * TELEM_STRIDE));
100240ec:	4b67      	ldr	r3, [pc, #412]	; (1002428c <patch_Telemetry_change_scales+0x210>)
100240ee:	18ec      	adds	r4, r5, r3
100240f0:	02a4      	lsls	r4, r4, #10
 * HW 'behind' this address, changing the address' content.
 */
HAL_INLINE uint32_t HAL_GET32(volatile uint32_t* addr);

HAL_INLINE uint32_t HAL_GET32(volatile uint32_t* addr) {
    return *addr;
100240f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 * @param bf_value new value for TLM_VRECT_SCALE_LOOP.TLM_VRECT_SCALE_LOOP
 */
__TELEM_INLINE void TELEM_TLM_VRECT_SCALE_LOOP__TLM_VRECT_SCALE_LOOP__SET(telem_idx_t idp, uint32_t bf_value)
{
    uint32_t reg = TELEM_TLM_VRECT_SCALE_LOOP__GET(idp);
    reg = (reg & ~TELEM_TLM_VRECT_SCALE_LOOP__TLM_VRECT_SCALE_LOOP__Msk);
100240f4:	0b1b      	lsrs	r3, r3, #12
100240f6:	031a      	lsls	r2, r3, #12
    reg = (reg | (TELEM_TLM_VRECT_SCALE_LOOP__TLM_VRECT_SCALE_LOOP__Shift((uint32_t)bf_value)));
100240f8:	4643      	mov	r3, r8
100240fa:	051b      	lsls	r3, r3, #20
100240fc:	0d1b      	lsrs	r3, r3, #20
100240fe:	4313      	orrs	r3, r2
    *addr = val;
10024100:	6423      	str	r3, [r4, #64]	; 0x40

	TELEM_TLM_VRECT_SCALE_LOOP__TLM_VRECT_SCALE_LOOP__SET((telem_idx_t)loop, (vrect_value));  // LSB is 1/256

	// Get MFR_TRANSFORMER_SCALE
	uint16_t transformer_scale_linear11 = PMBUS_Get_Command_Word(loop, PMBUS_CMDCODE_MFR_TRANSFORMER_SCALE);
10024102:	21ce      	movs	r1, #206	; 0xce
10024104:	0028      	movs	r0, r5
10024106:	f7dd faa7 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
1002410a:	0543      	lsls	r3, r0, #21
1002410c:	0d5b      	lsrs	r3, r3, #21
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
1002410e:	0542      	lsls	r2, r0, #21
10024110:	d501      	bpl.n	10024116 <patch_Telemetry_change_scales+0x9a>
10024112:	4a5f      	ldr	r2, [pc, #380]	; (10024290 <patch_Telemetry_change_scales+0x214>)
10024114:	4313      	orrs	r3, r2
	uint32_t transformer_turns_ratio = (uint32_t)LINEAR11_TO_MANTISSA(transformer_scale_linear11);
10024116:	4699      	mov	r9, r3
	int32_t exp_bits=(packed_linear_format_number >> 11) & 0x1f;
10024118:	0ac0      	lsrs	r0, r0, #11
1002411a:	b280      	uxth	r0, r0
1002411c:	4682      	mov	sl, r0
	return ((int32_t) (exp_signbit ? (exp_bits | 0xffffffe0) : exp_bits));
1002411e:	06c3      	lsls	r3, r0, #27
10024120:	d503      	bpl.n	1002412a <patch_Telemetry_change_scales+0xae>
10024122:	2320      	movs	r3, #32
10024124:	425b      	negs	r3, r3
10024126:	4303      	orrs	r3, r0
10024128:	469a      	mov	sl, r3
	int32_t transformer_scale_exponent = LINEAR11_TO_EXPONENT(transformer_scale_linear11);
	// if half bridge we need to divide the turns ratio by 2
	if ((Regulation_Get_PMBUS_Configuration(loop, REGULATION_CONFIG_TOPOLOGY) == (uint16_t)REGULATION_TOPOLOGY_HB_CT)
1002412a:	210d      	movs	r1, #13
1002412c:	0028      	movs	r0, r5
1002412e:	f7e1 fdbf 	bl	10005cb0 <Regulation_Get_All_Q_Messages_By_Priority+0x147>
10024132:	2802      	cmp	r0, #2
10024134:	d005      	beq.n	10024142 <patch_Telemetry_change_scales+0xc6>
		|| (Regulation_Get_PMBUS_Configuration(loop, REGULATION_CONFIG_TOPOLOGY) == (uint16_t)REGULATION_TOPOLOGY_HB_FW))
10024136:	210d      	movs	r1, #13
10024138:	0028      	movs	r0, r5
1002413a:	f7e1 fdb9 	bl	10005cb0 <Regulation_Get_All_Q_Messages_By_Priority+0x147>
1002413e:	2803      	cmp	r0, #3
10024140:	d102      	bne.n	10024148 <patch_Telemetry_change_scales+0xcc>
		transformer_turns_ratio = transformer_turns_ratio >> 1;  // divide by 2
10024142:	464b      	mov	r3, r9
10024144:	085b      	lsrs	r3, r3, #1
10024146:	4699      	mov	r9, r3

	transformer_turns_ratio = SHIFT_EXPONENT_UNSIGNED(transformer_turns_ratio, (transformer_scale_exponent+12));
10024148:	4653      	mov	r3, sl
1002414a:	330c      	adds	r3, #12
		value = value << (exponent);
1002414c:	464e      	mov	r6, r9
1002414e:	409e      	lsls	r6, r3
	if ( exponent <= 0)
10024150:	2b00      	cmp	r3, #0
10024152:	dd2a      	ble.n	100241aa <patch_Telemetry_change_scales+0x12e>
    return *addr;
10024154:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    reg = (reg & ~TELEM_TLM_TRNS_SCALE_LP__TLM_TRANSFORMER_SCALE_LOOP__Msk);
10024156:	0b1b      	lsrs	r3, r3, #12
10024158:	031a      	lsls	r2, r3, #12
    reg = (reg | (TELEM_TLM_TRNS_SCALE_LP__TLM_TRANSFORMER_SCALE_LOOP__Shift((uint32_t)bf_value)));
1002415a:	0533      	lsls	r3, r6, #20
1002415c:	0d1b      	lsrs	r3, r3, #20
1002415e:	4313      	orrs	r3, r2
    *addr = val;
10024160:	63e3      	str	r3, [r4, #60]	; 0x3c

	TELEM_TLM_TRNS_SCALE_LP__TLM_TRANSFORMER_SCALE_LOOP__SET((telem_idx_t)loop, transformer_turns_ratio);  // lsb = 1/1024

	uint32_t vin_convert = 32767;  // clamp to 2^15 - 1
	if ((vrect_value>0) && (transformer_turns_ratio>0))
10024162:	4643      	mov	r3, r8
10024164:	2b00      	cmp	r3, #0
10024166:	d027      	beq.n	100241b8 <patch_Telemetry_change_scales+0x13c>
10024168:	2e00      	cmp	r6, #0
1002416a:	d05e      	beq.n	1002422a <patch_Telemetry_change_scales+0x1ae>
	{
		vin_convert = vrect_value*transformer_turns_ratio;  // both -12 format
1002416c:	4641      	mov	r1, r8
1002416e:	4371      	muls	r1, r6
		value = value >> (exponent);
10024170:	0a89      	lsrs	r1, r1, #10
		vin_convert = SHIFT_EXPONENT_UNSIGNED(vin_convert, -10);  // convert to -14 format
		vin_convert = (1<<22) / (vin_convert);
10024172:	2080      	movs	r0, #128	; 0x80
10024174:	03c0      	lsls	r0, r0, #15
10024176:	f7dc f934 	bl	100003e2 <__aeabi_uidivmod>
1002417a:	0002      	movs	r2, r0
1002417c:	4b45      	ldr	r3, [pc, #276]	; (10024294 <patch_Telemetry_change_scales+0x218>)
1002417e:	4298      	cmp	r0, r3
10024180:	d91b      	bls.n	100241ba <patch_Telemetry_change_scales+0x13e>
10024182:	001a      	movs	r2, r3
10024184:	e019      	b.n	100241ba <patch_Telemetry_change_scales+0x13e>
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
10024186:	4b42      	ldr	r3, [pc, #264]	; (10024290 <patch_Telemetry_change_scales+0x214>)
10024188:	4313      	orrs	r3, r2
1002418a:	e785      	b.n	10024098 <patch_Telemetry_change_scales+0x1c>
		exponent = -exponent;
1002418c:	2209      	movs	r2, #9
1002418e:	4252      	negs	r2, r2
10024190:	1a10      	subs	r0, r2, r0
		value = value >> (exponent);
10024192:	40c3      	lsrs	r3, r0
10024194:	001f      	movs	r7, r3
10024196:	e78c      	b.n	100240b2 <patch_Telemetry_change_scales+0x36>
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
10024198:	4b3d      	ldr	r3, [pc, #244]	; (10024290 <patch_Telemetry_change_scales+0x214>)
1002419a:	4313      	orrs	r3, r2
1002419c:	e796      	b.n	100240cc <patch_Telemetry_change_scales+0x50>
		exponent = -exponent;
1002419e:	220c      	movs	r2, #12
100241a0:	4252      	negs	r2, r2
100241a2:	1a10      	subs	r0, r2, r0
		value = value >> (exponent);
100241a4:	40c3      	lsrs	r3, r0
100241a6:	0019      	movs	r1, r3
100241a8:	e79d      	b.n	100240e6 <patch_Telemetry_change_scales+0x6a>
		exponent = -exponent;
100241aa:	200c      	movs	r0, #12
100241ac:	4240      	negs	r0, r0
100241ae:	4653      	mov	r3, sl
100241b0:	1ac0      	subs	r0, r0, r3
		value = value >> (exponent);
100241b2:	464e      	mov	r6, r9
100241b4:	40c6      	lsrs	r6, r0
100241b6:	e7cd      	b.n	10024154 <patch_Telemetry_change_scales+0xd8>
	uint32_t vin_convert = 32767;  // clamp to 2^15 - 1
100241b8:	4a36      	ldr	r2, [pc, #216]	; (10024294 <patch_Telemetry_change_scales+0x218>)
    return *addr;
100241ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    reg = (reg & ~TELEM_TLM_VI_CNVRT_FACT__TLM_VIN_CONVERT_FACTOR__Msk);
100241bc:	0d9b      	lsrs	r3, r3, #22
100241be:	059b      	lsls	r3, r3, #22
		if (vin_convert > 32767) vin_convert = 32767;
	}

	vin_convert = vin_convert * 82;
100241c0:	2052      	movs	r0, #82	; 0x52
100241c2:	4350      	muls	r0, r2
    reg = (reg | (TELEM_TLM_VI_CNVRT_FACT__TLM_VIN_CONVERT_FACTOR__Shift((uint32_t)bf_value)));
100241c4:	0280      	lsls	r0, r0, #10
100241c6:	0a80      	lsrs	r0, r0, #10
100241c8:	4318      	orrs	r0, r3
    *addr = val;
100241ca:	62a0      	str	r0, [r4, #40]	; 0x28
	TELEM_TLM_VI_CNVRT_FACT__TLM_VIN_CONVERT_FACTOR__SET((telem_idx_t)loop, vin_convert);  // lsb = 1/1024

	uint32_t vout_scale = PMBUS_Get_Vout_Scale(loop, -16);  //  // convert to u0.16 format if not already
100241cc:	2110      	movs	r1, #16
100241ce:	4249      	negs	r1, r1
100241d0:	0028      	movs	r0, r5
100241d2:	f7dd faac 	bl	1000172e <PMBUS_Get_Vout_Mode_Exponent+0x1d>
100241d6:	0005      	movs	r5, r0
    return *addr;
100241d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 * @param bf_value new value for TLM_VOUT_SCALE_LOOP.TLM_VOUT_SCALE_LOOP
 */
__TELEM_INLINE void TELEM_TLM_VOUT_SCALE_LOOP__TLM_VOUT_SCALE_LOOP__SET(telem_idx_t idp, uint32_t bf_value)
{
    uint32_t reg = TELEM_TLM_VOUT_SCALE_LOOP__GET(idp);
    reg = (reg & ~TELEM_TLM_VOUT_SCALE_LOOP__TLM_VOUT_SCALE_LOOP__Msk);
100241da:	0c1b      	lsrs	r3, r3, #16
100241dc:	041a      	lsls	r2, r3, #16
    reg = (reg | (TELEM_TLM_VOUT_SCALE_LOOP__TLM_VOUT_SCALE_LOOP__Shift((uint32_t)bf_value)));
100241de:	0403      	lsls	r3, r0, #16
100241e0:	0c1b      	lsrs	r3, r3, #16
100241e2:	4313      	orrs	r3, r2
    *addr = val;
100241e4:	6463      	str	r3, [r4, #68]	; 0x44

	TELEM_TLM_VOUT_SCALE_LOOP__TLM_VOUT_SCALE_LOOP__SET((telem_idx_t)loop, (vout_scale));  // LSB is 1/256

	uint32_t vout_convert = 16383;  // clamp to 2^14 - 1
	if (vout_scale>0) {
100241e6:	2800      	cmp	r0, #0
100241e8:	d031      	beq.n	1002424e <patch_Telemetry_change_scales+0x1d2>
		vout_convert = (1<<24) / (vout_scale);
100241ea:	0001      	movs	r1, r0
100241ec:	2080      	movs	r0, #128	; 0x80
100241ee:	0440      	lsls	r0, r0, #17
100241f0:	f7dc f8f7 	bl	100003e2 <__aeabi_uidivmod>
100241f4:	0002      	movs	r2, r0
100241f6:	4b28      	ldr	r3, [pc, #160]	; (10024298 <patch_Telemetry_change_scales+0x21c>)
100241f8:	4298      	cmp	r0, r3
100241fa:	d900      	bls.n	100241fe <patch_Telemetry_change_scales+0x182>
100241fc:	001a      	movs	r2, r3
    return *addr;
100241fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    reg = (reg & ~TELEM_TLM_VO_CNVRT_FACT__TLM_VOUT_CONVERT_FACTOR__Msk);
10024200:	0d5b      	lsrs	r3, r3, #21
10024202:	055b      	lsls	r3, r3, #21
		if (vout_convert > 16383) vout_convert = 16383;
	}
	vout_convert = vout_convert * 82;
10024204:	2052      	movs	r0, #82	; 0x52
10024206:	4350      	muls	r0, r2
    reg = (reg | (TELEM_TLM_VO_CNVRT_FACT__TLM_VOUT_CONVERT_FACTOR__Shift((uint32_t)bf_value)));
10024208:	02c0      	lsls	r0, r0, #11
1002420a:	0ac0      	lsrs	r0, r0, #11
1002420c:	4318      	orrs	r0, r3
    *addr = val;
1002420e:	6320      	str	r0, [r4, #48]	; 0x30
	TELEM_TLM_VO_CNVRT_FACT__TLM_VOUT_CONVERT_FACTOR__SET((telem_idx_t)loop, vout_convert);

	//  ************** FF_ONE_DIV_VOUT_SCALE_LOOP compensation with ADJ_TURNRATIO  **************
	uint32_t pid_ff_one_div_vout_scale_loop = 0x1FF;//U6.3
	if (vout_scale>0) {
		pid_ff_one_div_vout_scale_loop = (1<<28) / (vout_scale) / (adj_turnratio_value); // U6.3
10024210:	0029      	movs	r1, r5
10024212:	2080      	movs	r0, #128	; 0x80
10024214:	0540      	lsls	r0, r0, #21
10024216:	f7dc f8e4 	bl	100003e2 <__aeabi_uidivmod>
1002421a:	0039      	movs	r1, r7
1002421c:	f7dc f8e1 	bl	100003e2 <__aeabi_uidivmod>
10024220:	4b1e      	ldr	r3, [pc, #120]	; (1002429c <patch_Telemetry_change_scales+0x220>)
10024222:	4298      	cmp	r0, r3
10024224:	d91a      	bls.n	1002425c <patch_Telemetry_change_scales+0x1e0>
10024226:	0018      	movs	r0, r3
10024228:	e018      	b.n	1002425c <patch_Telemetry_change_scales+0x1e0>
	uint32_t vin_convert = 32767;  // clamp to 2^15 - 1
1002422a:	4a1a      	ldr	r2, [pc, #104]	; (10024294 <patch_Telemetry_change_scales+0x218>)
1002422c:	e7c5      	b.n	100241ba <patch_Telemetry_change_scales+0x13e>
		if (pid_ff_one_div_vout_scale_loop > 0x1FF) pid_ff_one_div_vout_scale_loop = 0x1FF;
	}
	PID_PID_FF_CFG3__PID_FF_ONE_DIV_VOUT_SCALE_LOOP__SET((pid_idx_t)loop, pid_ff_one_div_vout_scale_loop); //

	uint32_t pid_ff_i82_div_trans_scale_loop = 0xFFF; //U5.7
1002422e:	4a1c      	ldr	r2, [pc, #112]	; (100242a0 <patch_Telemetry_change_scales+0x224>)
    return *addr;
10024230:	6823      	ldr	r3, [r4, #0]
 * @param bf_value new value for PID_FF_CFG3.PID_FF_I82_DIV_TRANS_SCALE_LOOP
 */
__PID_INLINE void PID_PID_FF_CFG3__PID_FF_I82_DIV_TRANS_SCALE_LOOP__SET(pid_idx_t idp, uint32_t bf_value)
{
    uint32_t reg = PID_PID_FF_CFG3__GET(idp);
    reg = (reg & ~PID_PID_FF_CFG3__PID_FF_I82_DIV_TRANS_SCALE_LOOP__Msk);
10024232:	481c      	ldr	r0, [pc, #112]	; (100242a4 <patch_Telemetry_change_scales+0x228>)
10024234:	4003      	ands	r3, r0
	if (transformer_turns_ratio>0) {
		pid_ff_i82_div_trans_scale_loop =  (1<<19)/transformer_turns_ratio; //U5.7  quot1(U5.7) = 2^(-3-exp) / MFR_TRANSFORMER_SCALE[9:0], exp =-12
		if (pid_ff_i82_div_trans_scale_loop > 0xFFF) pid_ff_i82_div_trans_scale_loop = 0xFFF;
	}
	pid_ff_i82_div_trans_scale_loop = pid_ff_i82_div_trans_scale_loop * 82; //U-4.23
10024236:	2052      	movs	r0, #82	; 0x52
10024238:	4350      	muls	r0, r2
    reg = (reg | (PID_PID_FF_CFG3__PID_FF_I82_DIV_TRANS_SCALE_LOOP__Shift((uint32_t)bf_value)));
1002423a:	0240      	lsls	r0, r0, #9
1002423c:	4a1a      	ldr	r2, [pc, #104]	; (100242a8 <patch_Telemetry_change_scales+0x22c>)
1002423e:	4010      	ands	r0, r2
10024240:	4318      	orrs	r0, r3
    *addr = val;
10024242:	6020      	str	r0, [r4, #0]
 	PID_PID_FF_CFG3__PID_FF_I82_DIV_TRANS_SCALE_LOOP__SET((pid_idx_t)loop, pid_ff_i82_div_trans_scale_loop); //U-4.23
}
10024244:	bc1c      	pop	{r2, r3, r4}
10024246:	4690      	mov	r8, r2
10024248:	4699      	mov	r9, r3
1002424a:	46a2      	mov	sl, r4
1002424c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return *addr;
1002424e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    reg = (reg & ~TELEM_TLM_VO_CNVRT_FACT__TLM_VOUT_CONVERT_FACTOR__Msk);
10024250:	0d5b      	lsrs	r3, r3, #21
10024252:	055b      	lsls	r3, r3, #21
    reg = (reg | (TELEM_TLM_VO_CNVRT_FACT__TLM_VOUT_CONVERT_FACTOR__Shift((uint32_t)bf_value)));
10024254:	4a15      	ldr	r2, [pc, #84]	; (100242ac <patch_Telemetry_change_scales+0x230>)
10024256:	4313      	orrs	r3, r2
    *addr = val;
10024258:	6323      	str	r3, [r4, #48]	; 0x30
	uint32_t pid_ff_one_div_vout_scale_loop = 0x1FF;//U6.3
1002425a:	4810      	ldr	r0, [pc, #64]	; (1002429c <patch_Telemetry_change_scales+0x220>)
    return (uint32_t*)((uint32_t)__PID_BASE_PTR(idp) + (uint32_t)(offsetof(PID_t, PID_FF_CFG3)));
1002425c:	4b14      	ldr	r3, [pc, #80]	; (100242b0 <patch_Telemetry_change_scales+0x234>)
1002425e:	469c      	mov	ip, r3
10024260:	4464      	add	r4, ip
    return *addr;
10024262:	6823      	ldr	r3, [r4, #0]
 * @param bf_value new value for PID_FF_CFG3.PID_FF_ONE_DIV_VOUT_SCALE_LOOP
 */
__PID_INLINE void PID_PID_FF_CFG3__PID_FF_ONE_DIV_VOUT_SCALE_LOOP__SET(pid_idx_t idp, uint32_t bf_value)
{
    uint32_t reg = PID_PID_FF_CFG3__GET(idp);
    reg = (reg & ~PID_PID_FF_CFG3__PID_FF_ONE_DIV_VOUT_SCALE_LOOP__Msk);
10024264:	0a5b      	lsrs	r3, r3, #9
10024266:	025b      	lsls	r3, r3, #9
    reg = (reg | (PID_PID_FF_CFG3__PID_FF_ONE_DIV_VOUT_SCALE_LOOP__Shift((uint32_t)bf_value)));
10024268:	05c0      	lsls	r0, r0, #23
1002426a:	0dc0      	lsrs	r0, r0, #23
1002426c:	4318      	orrs	r0, r3
    *addr = val;
1002426e:	6020      	str	r0, [r4, #0]
	if (transformer_turns_ratio>0) {
10024270:	2e00      	cmp	r6, #0
10024272:	d0dc      	beq.n	1002422e <patch_Telemetry_change_scales+0x1b2>
		pid_ff_i82_div_trans_scale_loop =  (1<<19)/transformer_turns_ratio; //U5.7  quot1(U5.7) = 2^(-3-exp) / MFR_TRANSFORMER_SCALE[9:0], exp =-12
10024274:	0031      	movs	r1, r6
10024276:	2080      	movs	r0, #128	; 0x80
10024278:	0300      	lsls	r0, r0, #12
1002427a:	f7dc f8b2 	bl	100003e2 <__aeabi_uidivmod>
1002427e:	0002      	movs	r2, r0
10024280:	4b07      	ldr	r3, [pc, #28]	; (100242a0 <patch_Telemetry_change_scales+0x224>)
10024282:	4298      	cmp	r0, r3
10024284:	d9d4      	bls.n	10024230 <patch_Telemetry_change_scales+0x1b4>
10024286:	001a      	movs	r2, r3
10024288:	e7d2      	b.n	10024230 <patch_Telemetry_change_scales+0x1b4>
1002428a:	46c0      	nop			; (mov r8, r8)
1002428c:	001c000d 	.word	0x001c000d
10024290:	fffff800 	.word	0xfffff800
10024294:	00007fff 	.word	0x00007fff
10024298:	00003fff 	.word	0x00003fff
1002429c:	000001ff 	.word	0x000001ff
100242a0:	00000fff 	.word	0x00000fff
100242a4:	f00001ff 	.word	0xf00001ff
100242a8:	0ffffe00 	.word	0x0ffffe00
100242ac:	00147fae 	.word	0x00147fae
100242b0:	ffffe824 	.word	0xffffe824

100242b4 <pmbus_mfr_autogen_init>:
{


	/* initialize command structure for MFR_ADJ_TURN_RATIO. */
	// MFR_ADJ_TURN_RATIO COMMAND:
	ptr_pmbus_callback[PMBUS_CMDCODE_MFR_ADJ_TURN_RATIO] = PMBUS_HANDLE_MFR_ADJ_TURN_RATIO;
100242b4:	21b1      	movs	r1, #177	; 0xb1
100242b6:	0089      	lsls	r1, r1, #2
100242b8:	4a0e      	ldr	r2, [pc, #56]	; (100242f4 <pmbus_mfr_autogen_init+0x40>)
100242ba:	4b0f      	ldr	r3, [pc, #60]	; (100242f8 <pmbus_mfr_autogen_init+0x44>)
100242bc:	505a      	str	r2, [r3, r1]
	//PMBUS_CMD_MFR_ADJ_TURN_RATIO.NUM_PROTOCOL_BYTES = 2;  // slave address command and any other non-data bytes
	//PMBUS_CMD_MFR_ADJ_TURN_RATIO.SUPPORTED = 1;
	//PMBUS_CMD_MFR_ADJ_TURN_RATIO.PROTECTED0 = 0;
	//PMBUS_CMD_MFR_ADJ_TURN_RATIO.PROTECTED1 = 0;
	//PMBUS_CMD_MFR_ADJ_TURN_RATIO.RANGE_TYPE = (uint8_t) PMBUS_RANGE_LINEAR11_UNSIGNED_ARRAY;
	PMBUS_CMD_MFR_ADJ_TURN_RATIO.RANGE = &PMBUS_CMD_MFR_ADJ_TURN_RATIO_RANGE[0];
100242be:	4b0f      	ldr	r3, [pc, #60]	; (100242fc <pmbus_mfr_autogen_init+0x48>)
100242c0:	4a0f      	ldr	r2, [pc, #60]	; (10024300 <pmbus_mfr_autogen_init+0x4c>)
100242c2:	605a      	str	r2, [r3, #4]
	PMBUS_CMD_MFR_ADJ_TURN_RATIO_RANGE[0] = 1;
100242c4:	2001      	movs	r0, #1
100242c6:	7010      	strb	r0, [r2, #0]
	PMBUS_CMD_MFR_ADJ_TURN_RATIO_RANGE[1] = 9;
100242c8:	3008      	adds	r0, #8
100242ca:	7050      	strb	r0, [r2, #1]
	PMBUS_CMD_MFR_ADJ_TURN_RATIO_RANGE[2] = 2;
100242cc:	3807      	subs	r0, #7
100242ce:	7090      	strb	r0, [r2, #2]
	PMBUS_CMD_MFR_ADJ_TURN_RATIO_RANGE[3] = 8;
100242d0:	3006      	adds	r0, #6
100242d2:	70d0      	strb	r0, [r2, #3]
	PMBUS_CMD_MFR_ADJ_TURN_RATIO.CMD_CONFIG = 0xc58223b1;
100242d4:	4a0b      	ldr	r2, [pc, #44]	; (10024304 <pmbus_mfr_autogen_init+0x50>)
100242d6:	601a      	str	r2, [r3, #0]
	PMBUS_CMD_MFR_ADJ_TURN_RATIO.DATA0 = &PMBUS_CMD_MFR_ADJ_TURN_RATIO_DATA_LOOP0[0];  // set the pointer to the data array
100242d8:	4a0b      	ldr	r2, [pc, #44]	; (10024308 <pmbus_mfr_autogen_init+0x54>)
100242da:	609a      	str	r2, [r3, #8]
	PMBUS_CMD_MFR_ADJ_TURN_RATIO.DATA1 = &PMBUS_CMD_MFR_ADJ_TURN_RATIO_DATA_LOOP1[0];  // set the pointer to the data array
100242dc:	4a0b      	ldr	r2, [pc, #44]	; (1002430c <pmbus_mfr_autogen_init+0x58>)
100242de:	60da      	str	r2, [r3, #12]
	// RANGE SUPPORT for MFR_ADJ_TURN_RATIO COMMAND:
	// now populate pointers to the supported commands for each page
	PMBUS_CMD_ARRAY_LOOP[PMBUS_CMDCODE_MFR_ADJ_TURN_RATIO] = &PMBUS_CMD_MFR_ADJ_TURN_RATIO;
100242e0:	4a0b      	ldr	r2, [pc, #44]	; (10024310 <pmbus_mfr_autogen_init+0x5c>)
100242e2:	5053      	str	r3, [r2, r1]
	//PMBUS_CMD_ARRAY_LOOP1[PMBUS_CMDCODE_MFR_ADJ_TURN_RATIO] = &PMBUS_CMD_MFR_ADJ_TURN_RATIO;
	//lint -e{778} suppress "Constant expression evaluates to 0 in operation '&'" 
	PMBUS_CMD_SUPPORT_ARRAY_LOOP[PMBUS_CMDCODE_MFR_ADJ_TURN_RATIO/32] |= (uint32_t) ((uint32_t)1u << ((uint32_t)PMBUS_CMDCODE_MFR_ADJ_TURN_RATIO&31u));
100242e4:	4a0b      	ldr	r2, [pc, #44]	; (10024314 <pmbus_mfr_autogen_init+0x60>)
100242e6:	2380      	movs	r3, #128	; 0x80
100242e8:	029b      	lsls	r3, r3, #10
100242ea:	6951      	ldr	r1, [r2, #20]
100242ec:	430b      	orrs	r3, r1
100242ee:	6153      	str	r3, [r2, #20]
	//PMBUS_CMD_SUPPORT_ARRAY_LOOP1[PMBUS_CMDCODE_MFR_ADJ_TURN_RATIO/32] |= (uint32_t) ((uint32_t)1u << ((uint32_t)PMBUS_CMDCODE_MFR_ADJ_TURN_RATIO&31u));

}
100242f0:	4770      	bx	lr
100242f2:	46c0      	nop			; (mov r8, r8)
100242f4:	10024319 	.word	0x10024319
100242f8:	2005d954 	.word	0x2005d954
100242fc:	20063804 	.word	0x20063804
10024300:	20063818 	.word	0x20063818
10024304:	c58223b1 	.word	0xc58223b1
10024308:	20063800 	.word	0x20063800
1002430c:	20063814 	.word	0x20063814
10024310:	2005d534 	.word	0x2005d534
10024314:	2005d934 	.word	0x2005d934

10024318 <PMBUS_HANDLE_MFR_ADJ_TURN_RATIO>:
 * Transformer scaling change handler.
 * @param page Selects the PMBus page to operate on.
 * @param direction Can either be PMBUS_WRITE or PMBUS_READ types
 */
void PMBUS_HANDLE_MFR_ADJ_TURN_RATIO(PMBUS_PAGE_t page, PMBUS_DIRECTION_e direction)
{
10024318:	b510      	push	{r4, lr}
	/*  Transformer Scaling Example modification Start*/
	patch_Telemetry_change_scales(page);
1002431a:	f7ff feaf 	bl	1002407c <patch_Telemetry_change_scales>
	/*  Transformer Scaling Example modification End*/
}
1002431e:	bd10      	pop	{r4, pc}

10024320 <AT_TARGET_ENABLE>:
}

void AT_TARGET_ENABLE(PMBUS_PAGE_t loop)
{

}
10024320:	4770      	bx	lr
	...

10024324 <regulation_sm_callbacks_init>:
{
10024324:	b510      	push	{r4, lr}
	Regulation_set_regulation_event_cb(REGULATION_STATE_AT_TARGET_VID, REGULATION_CONTROLS_ENABLE,
10024326:	4a03      	ldr	r2, [pc, #12]	; (10024334 <regulation_sm_callbacks_init+0x10>)
10024328:	2109      	movs	r1, #9
1002432a:	2003      	movs	r0, #3
1002432c:	f7e3 fc18 	bl	10007b60 <Regulation_set_fsw_irq_event_cb+0x2b>
}
10024330:	bd10      	pop	{r4, pc}
10024332:	46c0      	nop			; (mov r8, r8)
10024334:	10024321 	.word	0x10024321

10024338 <patch_pmbus_mfr_autogen_init>:

void patch_pmbus_mfr_autogen_init(void);


void patch_pmbus_mfr_autogen_init(void)
{
10024338:	b510      	push	{r4, lr}
	pmbus_mfr_autogen_init();
1002433a:	f7ff ffbb 	bl	100242b4 <pmbus_mfr_autogen_init>
}
1002433e:	bd10      	pop	{r4, pc}

10024340 <user_drv_init>:
 * Main entry point of the user application.  Good place to set breakpoint when debugging a patch.
 * This will only get executed a single time prior to configuration loading and before RTOS starts
 */

void user_drv_init(void)
{
10024340:	b510      	push	{r4, lr}
	memset(&user_data, 0, sizeof(USER_DATA_t));  // ZI the user data
10024342:	2274      	movs	r2, #116	; 0x74
10024344:	2100      	movs	r1, #0
10024346:	480a      	ldr	r0, [pc, #40]	; (10024370 <user_drv_init+0x30>)
10024348:	f000 f85c 	bl	10024404 <memset>

	/*  Transformer Scaling Example modification Start*/
	patch_Telemetry_change_scales(PMBUS_PAGE_0);
1002434c:	2000      	movs	r0, #0
1002434e:	f7ff fe95 	bl	1002407c <patch_Telemetry_change_scales>
	patch_Telemetry_change_scales(PMBUS_PAGE_1);
10024352:	2001      	movs	r0, #1
10024354:	f7ff fe92 	bl	1002407c <patch_Telemetry_change_scales>
	/*  Transformer Scaling Example modification End*/

	// this is the initialization of user pmbus commands autogenerated from pmbus spreadsheet
	ptr_mfr_specific_init = (mfr_specific_init_ptr) patch_pmbus_mfr_autogen_init;
10024358:	4a06      	ldr	r2, [pc, #24]	; (10024374 <user_drv_init+0x34>)
1002435a:	4b07      	ldr	r3, [pc, #28]	; (10024378 <user_drv_init+0x38>)
1002435c:	601a      	str	r2, [r3, #0]

	// set the pointer funtion in init of regulation state machine to user callback setup for each state
	set_module_init_cb(MODULE_REGULATION, regulation_sm_callbacks_init);
1002435e:	4907      	ldr	r1, [pc, #28]	; (1002437c <user_drv_init+0x3c>)
10024360:	2002      	movs	r0, #2
10024362:	f7e0 fac3 	bl	100048ec <scratchpad_semaphore_release+0x33>

	add_on_features_init();
10024366:	f7ff fe87 	bl	10024078 <add_on_features_init>
	regulation_sm_callbacks_init();
1002436a:	f7ff ffdb 	bl	10024324 <regulation_sm_callbacks_init>
}
1002436e:	bd10      	pop	{r4, pc}
10024370:	2006381c 	.word	0x2006381c
10024374:	10024339 	.word	0x10024339
10024378:	2005d468 	.word	0x2005d468
1002437c:	10024325 	.word	0x10024325

10024380 <memcpy>:
10024380:	b5f0      	push	{r4, r5, r6, r7, lr}
10024382:	0005      	movs	r5, r0
10024384:	2a0f      	cmp	r2, #15
10024386:	d92f      	bls.n	100243e8 <memcpy+0x68>
10024388:	000b      	movs	r3, r1
1002438a:	4303      	orrs	r3, r0
1002438c:	079b      	lsls	r3, r3, #30
1002438e:	d134      	bne.n	100243fa <memcpy+0x7a>
10024390:	0016      	movs	r6, r2
10024392:	000c      	movs	r4, r1
10024394:	0003      	movs	r3, r0
10024396:	3e10      	subs	r6, #16
10024398:	0935      	lsrs	r5, r6, #4
1002439a:	3501      	adds	r5, #1
1002439c:	012d      	lsls	r5, r5, #4
1002439e:	1945      	adds	r5, r0, r5
100243a0:	6827      	ldr	r7, [r4, #0]
100243a2:	601f      	str	r7, [r3, #0]
100243a4:	6867      	ldr	r7, [r4, #4]
100243a6:	605f      	str	r7, [r3, #4]
100243a8:	68a7      	ldr	r7, [r4, #8]
100243aa:	609f      	str	r7, [r3, #8]
100243ac:	68e7      	ldr	r7, [r4, #12]
100243ae:	3410      	adds	r4, #16
100243b0:	60df      	str	r7, [r3, #12]
100243b2:	3310      	adds	r3, #16
100243b4:	429d      	cmp	r5, r3
100243b6:	d1f3      	bne.n	100243a0 <memcpy+0x20>
100243b8:	230f      	movs	r3, #15
100243ba:	439e      	bics	r6, r3
100243bc:	3610      	adds	r6, #16
100243be:	1985      	adds	r5, r0, r6
100243c0:	1989      	adds	r1, r1, r6
100243c2:	4013      	ands	r3, r2
100243c4:	2b03      	cmp	r3, #3
100243c6:	d91a      	bls.n	100243fe <memcpy+0x7e>
100243c8:	1f1e      	subs	r6, r3, #4
100243ca:	2300      	movs	r3, #0
100243cc:	08b4      	lsrs	r4, r6, #2
100243ce:	3401      	adds	r4, #1
100243d0:	00a4      	lsls	r4, r4, #2
100243d2:	58cf      	ldr	r7, [r1, r3]
100243d4:	50ef      	str	r7, [r5, r3]
100243d6:	3304      	adds	r3, #4
100243d8:	42a3      	cmp	r3, r4
100243da:	d1fa      	bne.n	100243d2 <memcpy+0x52>
100243dc:	2403      	movs	r4, #3
100243de:	43a6      	bics	r6, r4
100243e0:	1d33      	adds	r3, r6, #4
100243e2:	4022      	ands	r2, r4
100243e4:	18c9      	adds	r1, r1, r3
100243e6:	18ed      	adds	r5, r5, r3
100243e8:	2a00      	cmp	r2, #0
100243ea:	d005      	beq.n	100243f8 <memcpy+0x78>
100243ec:	2300      	movs	r3, #0
100243ee:	5ccc      	ldrb	r4, [r1, r3]
100243f0:	54ec      	strb	r4, [r5, r3]
100243f2:	3301      	adds	r3, #1
100243f4:	4293      	cmp	r3, r2
100243f6:	d1fa      	bne.n	100243ee <memcpy+0x6e>
100243f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100243fa:	0005      	movs	r5, r0
100243fc:	e7f6      	b.n	100243ec <memcpy+0x6c>
100243fe:	001a      	movs	r2, r3
10024400:	e7f2      	b.n	100243e8 <memcpy+0x68>
10024402:	46c0      	nop			; (mov r8, r8)

10024404 <memset>:
10024404:	b5f0      	push	{r4, r5, r6, r7, lr}
10024406:	0783      	lsls	r3, r0, #30
10024408:	d043      	beq.n	10024492 <memset+0x8e>
1002440a:	1e54      	subs	r4, r2, #1
1002440c:	2a00      	cmp	r2, #0
1002440e:	d03f      	beq.n	10024490 <memset+0x8c>
10024410:	b2ce      	uxtb	r6, r1
10024412:	0002      	movs	r2, r0
10024414:	2503      	movs	r5, #3
10024416:	e002      	b.n	1002441e <memset+0x1a>
10024418:	001a      	movs	r2, r3
1002441a:	3c01      	subs	r4, #1
1002441c:	d338      	bcc.n	10024490 <memset+0x8c>
1002441e:	1c53      	adds	r3, r2, #1
10024420:	7016      	strb	r6, [r2, #0]
10024422:	422b      	tst	r3, r5
10024424:	d1f8      	bne.n	10024418 <memset+0x14>
10024426:	2c03      	cmp	r4, #3
10024428:	d92a      	bls.n	10024480 <memset+0x7c>
1002442a:	22ff      	movs	r2, #255	; 0xff
1002442c:	400a      	ands	r2, r1
1002442e:	0215      	lsls	r5, r2, #8
10024430:	4315      	orrs	r5, r2
10024432:	042a      	lsls	r2, r5, #16
10024434:	4315      	orrs	r5, r2
10024436:	2c0f      	cmp	r4, #15
10024438:	d914      	bls.n	10024464 <memset+0x60>
1002443a:	0027      	movs	r7, r4
1002443c:	001a      	movs	r2, r3
1002443e:	3f10      	subs	r7, #16
10024440:	093e      	lsrs	r6, r7, #4
10024442:	3601      	adds	r6, #1
10024444:	0136      	lsls	r6, r6, #4
10024446:	199e      	adds	r6, r3, r6
10024448:	6015      	str	r5, [r2, #0]
1002444a:	6055      	str	r5, [r2, #4]
1002444c:	6095      	str	r5, [r2, #8]
1002444e:	60d5      	str	r5, [r2, #12]
10024450:	3210      	adds	r2, #16
10024452:	4296      	cmp	r6, r2
10024454:	d1f8      	bne.n	10024448 <memset+0x44>
10024456:	220f      	movs	r2, #15
10024458:	4397      	bics	r7, r2
1002445a:	3710      	adds	r7, #16
1002445c:	19db      	adds	r3, r3, r7
1002445e:	4014      	ands	r4, r2
10024460:	2c03      	cmp	r4, #3
10024462:	d90d      	bls.n	10024480 <memset+0x7c>
10024464:	001a      	movs	r2, r3
10024466:	1f27      	subs	r7, r4, #4
10024468:	08be      	lsrs	r6, r7, #2
1002446a:	3601      	adds	r6, #1
1002446c:	00b6      	lsls	r6, r6, #2
1002446e:	199e      	adds	r6, r3, r6
10024470:	c220      	stmia	r2!, {r5}
10024472:	42b2      	cmp	r2, r6
10024474:	d1fc      	bne.n	10024470 <memset+0x6c>
10024476:	2203      	movs	r2, #3
10024478:	4397      	bics	r7, r2
1002447a:	3704      	adds	r7, #4
1002447c:	19db      	adds	r3, r3, r7
1002447e:	4014      	ands	r4, r2
10024480:	2c00      	cmp	r4, #0
10024482:	d005      	beq.n	10024490 <memset+0x8c>
10024484:	b2c9      	uxtb	r1, r1
10024486:	191c      	adds	r4, r3, r4
10024488:	7019      	strb	r1, [r3, #0]
1002448a:	3301      	adds	r3, #1
1002448c:	429c      	cmp	r4, r3
1002448e:	d1fb      	bne.n	10024488 <memset+0x84>
10024490:	bdf0      	pop	{r4, r5, r6, r7, pc}
10024492:	0014      	movs	r4, r2
10024494:	0003      	movs	r3, r0
10024496:	e7c6      	b.n	10024426 <memset+0x22>
