
.\build\patch/patch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bss          00000078  20063800  20063800  00023800  2**2
                  ALLOC
  1 .otp_data     00004000  10020000  10020000  00010000  2**0
                  ALLOC
  2 .otp_header   0000001c  10024000  10024000  00010000  2**0
                  ALLOC
  3 .txt          00000288  1002401c  1002401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .otp_patch2   00004000  100242a4  100242a4  000142a4  2**0
                  ALLOC
  5 .otp_patch3   00004000  100282a4  100282a4  000142a4  2**0
                  ALLOC
  6 .debug_info   000157bc  00000000  00000000  000142a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de7  00000000  00000000  00029a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000260  00000000  00000000  0002a847  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000e0  00000000  00000000  0002aaa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  0002ab87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009fdb  00000000  00000000  0002ac17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002532  00000000  00000000  00034bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00065276  00000000  00000000  00037124  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007f  00000000  00000000  0009c39a  2**0
                  CONTENTS, READONLY
 15 .ARM.attributes 00000031  00000000  00000000  0009c419  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000001b0  00000000  00000000  0009c44c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .txt:

1002401c <patch_entry>:
/**
 * This is the patch entry point, which is called after the patch got
 * successfully loaded into RAM.
 */
void patch_entry(void)
{
1002401c:	b510      	push	{r4, lr}
    // Initialize the .bss and .data section
    memset(SECTION_BASE_ZI, 0, SECTION_LENGTH_ZI);
1002401e:	480c      	ldr	r0, [pc, #48]	; (10024050 <patch_entry+0x34>)
10024020:	4a0c      	ldr	r2, [pc, #48]	; (10024054 <patch_entry+0x38>)
10024022:	1a12      	subs	r2, r2, r0
10024024:	2100      	movs	r1, #0
10024026:	f000 f8eb 	bl	10024200 <memset>
    memcpy(SECTION_BASE_RW_DESTINATION, SECTION_BASE_RW_SOURCE, SECTION_LENGTH_RW);
1002402a:	480b      	ldr	r0, [pc, #44]	; (10024058 <patch_entry+0x3c>)
1002402c:	4a0b      	ldr	r2, [pc, #44]	; (1002405c <patch_entry+0x40>)
1002402e:	1a12      	subs	r2, r2, r0
10024030:	490b      	ldr	r1, [pc, #44]	; (10024060 <patch_entry+0x44>)
10024032:	f000 f8a3 	bl	1002417c <memcpy>
    // Initialize ram execution section
    memcpy(SECTION_BASE_RAM_EXEC_DESTINATION, SECTION_BASE_RAM_EXEC_SOURCE, SECTION_LENGTH_RAM_EXEC);
10024036:	480b      	ldr	r0, [pc, #44]	; (10024064 <patch_entry+0x48>)
10024038:	4a0b      	ldr	r2, [pc, #44]	; (10024068 <patch_entry+0x4c>)
1002403a:	1a12      	subs	r2, r2, r0
1002403c:	490b      	ldr	r1, [pc, #44]	; (1002406c <patch_entry+0x50>)
1002403e:	f000 f89d 	bl	1002417c <memcpy>
/* lint requires us to have both a declaration and a definition ... we
 * could probably bail out through some local lint, but her we simply
 * play to the rules.
 */
HAL_INLINE void HAL_SET32(volatile uint32_t* addr, uint32_t val) {
    *addr = val;
10024042:	4a0b      	ldr	r2, [pc, #44]	; (10024070 <patch_entry+0x54>)
10024044:	4b0b      	ldr	r3, [pc, #44]	; (10024074 <patch_entry+0x58>)
10024046:	601a      	str	r2, [r3, #0]


    SCU_SPARE_FF__SET(0x5971BBBBUL);  // write the patch id to SCU spare for simple test that patch loaded
    user_drv_init();
10024048:	f000 f828 	bl	1002409c <user_drv_init>
}
1002404c:	bd10      	pop	{r4, pc}
1002404e:	46c0      	nop			; (mov r8, r8)
10024050:	20063800 	.word	0x20063800
10024054:	20063878 	.word	0x20063878
10024058:	20063800 	.word	0x20063800
1002405c:	20063800 	.word	0x20063800
10024060:	100242a4 	.word	0x100242a4
10024064:	20063878 	.word	0x20063878
10024068:	20063878 	.word	0x20063878
1002406c:	100242a4 	.word	0x100242a4
10024070:	5971bbbb 	.word	0x5971bbbb
10024074:	40000020 	.word	0x40000020

10024078 <add_on_features_init>:
#include "pmbus_mfr_autogen.h"

void add_on_features_init (void)
{
	uint8_t test1 = 0;
}
10024078:	4770      	bx	lr

1002407a <pmbus_mfr_autogen_init>:
 */
void pmbus_mfr_autogen_init(void)
{


}
1002407a:	4770      	bx	lr

1002407c <AT_TARGET_ENABLE>:
}

void AT_TARGET_ENABLE(PMBUS_PAGE_t loop)
{

}
1002407c:	4770      	bx	lr
	...

10024080 <regulation_sm_callbacks_init>:
{
10024080:	b510      	push	{r4, lr}
	Regulation_set_regulation_event_cb(REGULATION_STATE_AT_TARGET_VID, REGULATION_CONTROLS_ENABLE,
10024082:	4a03      	ldr	r2, [pc, #12]	; (10024090 <regulation_sm_callbacks_init+0x10>)
10024084:	2109      	movs	r1, #9
10024086:	2003      	movs	r0, #3
10024088:	f7e3 fd6a 	bl	10007b60 <Regulation_set_fsw_irq_event_cb+0x2b>
}
1002408c:	bd10      	pop	{r4, pc}
1002408e:	46c0      	nop			; (mov r8, r8)
10024090:	1002407d 	.word	0x1002407d

10024094 <patch_pmbus_mfr_autogen_init>:

void patch_pmbus_mfr_autogen_init(void);


void patch_pmbus_mfr_autogen_init(void)
{
10024094:	b510      	push	{r4, lr}
	pmbus_mfr_autogen_init();
10024096:	f7ff fff0 	bl	1002407a <pmbus_mfr_autogen_init>
}
1002409a:	bd10      	pop	{r4, pc}

1002409c <user_drv_init>:
 * Main entry point of the user application.  Good place to set breakpoint when debugging a patch.
 * This will only get executed a single time prior to configuration loading and before RTOS starts
 */

void user_drv_init(void)
{
1002409c:	b510      	push	{r4, lr}
	memset(&user_data, 0, sizeof(USER_DATA_t));  // ZI the user data
1002409e:	2274      	movs	r2, #116	; 0x74
100240a0:	2100      	movs	r1, #0
100240a2:	480f      	ldr	r0, [pc, #60]	; (100240e0 <user_drv_init+0x44>)
100240a4:	f000 f8ac 	bl	10024200 <memset>

	tid_USER_Thread = osExtThreadCreate(osThread(USER_Thread), NULL);
100240a8:	2100      	movs	r1, #0
100240aa:	480e      	ldr	r0, [pc, #56]	; (100240e4 <user_drv_init+0x48>)
100240ac:	f7df f846 	bl	1000313c <osExtKernelInitialize+0x1f>
100240b0:	4b0d      	ldr	r3, [pc, #52]	; (100240e8 <user_drv_init+0x4c>)
100240b2:	6018      	str	r0, [r3, #0]
	THROW_IF((tid_USER_Thread == NULL), OUT_OF_RESOURCE); /* osErrorNoMemory */
100240b4:	2800      	cmp	r0, #0
100240b6:	d00d      	beq.n	100240d4 <user_drv_init+0x38>

	// this is the initialization of user pmbus commands autogenerated from pmbus spreadsheet
	ptr_mfr_specific_init = (mfr_specific_init_ptr) patch_pmbus_mfr_autogen_init;
100240b8:	4a0c      	ldr	r2, [pc, #48]	; (100240ec <user_drv_init+0x50>)
100240ba:	4b0d      	ldr	r3, [pc, #52]	; (100240f0 <user_drv_init+0x54>)
100240bc:	601a      	str	r2, [r3, #0]

	// set the pointer funtion in init of regulation state machine to user callback setup for each state
	set_module_init_cb(MODULE_REGULATION, regulation_sm_callbacks_init);
100240be:	490d      	ldr	r1, [pc, #52]	; (100240f4 <user_drv_init+0x58>)
100240c0:	2002      	movs	r0, #2
100240c2:	f7e0 fc13 	bl	100048ec <scratchpad_semaphore_release+0x33>

	add_on_features_init();
100240c6:	f7ff ffd7 	bl	10024078 <add_on_features_init>
	regulation_sm_callbacks_init();
100240ca:	f7ff ffd9 	bl	10024080 <regulation_sm_callbacks_init>
	pmbus_mfr_autogen_init();
100240ce:	f7ff ffd4 	bl	1002407a <pmbus_mfr_autogen_init>
	patch_pmbus_mfr_autogen_init();

}
100240d2:	bd10      	pop	{r4, pc}
	THROW_IF((tid_USER_Thread == NULL), OUT_OF_RESOURCE); /* osErrorNoMemory */
100240d4:	2101      	movs	r1, #1
100240d6:	4249      	negs	r1, r1
100240d8:	3003      	adds	r0, #3
100240da:	f7de fffb 	bl	100030d4 <osExcLastGuardPop+0x13>
100240de:	e7eb      	b.n	100240b8 <user_drv_init+0x1c>
100240e0:	20063800 	.word	0x20063800
100240e4:	10024294 	.word	0x10024294
100240e8:	20063874 	.word	0x20063874
100240ec:	10024095 	.word	0x10024095
100240f0:	2005d468 	.word	0x2005d468
100240f4:	10024081 	.word	0x10024081

100240f8 <status_word_update>:
 * if only PG_STATUS = 1, then NON_OF_THE_ABOVE bit will be cleared.
 * This function is called in USER_Thread every 1 ms
 */

void status_word_update()
{
100240f8:	b510      	push	{r4, lr}
 * HW 'behind' this address, changing the address' content.
 */
HAL_INLINE uint32_t HAL_GET32(volatile uint32_t* addr);

HAL_INLINE uint32_t HAL_GET32(volatile uint32_t* addr) {
    return *addr;
100240fa:	4b19      	ldr	r3, [pc, #100]	; (10024160 <status_word_update+0x68>)
100240fc:	681c      	ldr	r4, [r3, #0]
		1			9  OTHER  A bit in STATUS_OTHER is set
		0			8  UNKNOWN
	 *
	 */

	if ( ( (data & (~(1<<(uint16_t)PMBUS_STATUS_POWER_GOOD)) ) >> 8 ) == 0)		// to check if PG_STATUS only one is "1" in 12:8 bits
100240fe:	0a22      	lsrs	r2, r4, #8
10024100:	4b18      	ldr	r3, [pc, #96]	; (10024164 <status_word_update+0x6c>)
10024102:	421a      	tst	r2, r3
10024104:	d101      	bne.n	1002410a <status_word_update+0x12>
	{
		data &= ~1;	// to clear 1sr bit NONE_OF_THE_ABOVE
10024106:	2301      	movs	r3, #1
10024108:	439c      	bics	r4, r3
	}

	PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)PMBUS_PAGE_0, PMBUS_CMDCODE_STATUS_WORD, (uint16_t)data);
1002410a:	b2a2      	uxth	r2, r4
1002410c:	2179      	movs	r1, #121	; 0x79
1002410e:	2000      	movs	r0, #0
10024110:	f7dd fbd8 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
	PMBUS_Set_Command_Byte((PMBUS_PAGE_W_BROADCAST_t)PMBUS_PAGE_0, PMBUS_CMDCODE_STATUS_BYTE, (uint8_t)data);
10024114:	b2e2      	uxtb	r2, r4
10024116:	2178      	movs	r1, #120	; 0x78
10024118:	2000      	movs	r0, #0
1002411a:	f7dd fb8d 	bl	10001838 <PMBUS_Log_Error+0x73>
1002411e:	4b12      	ldr	r3, [pc, #72]	; (10024168 <status_word_update+0x70>)
10024120:	681c      	ldr	r4, [r3, #0]

	data = PMBUS_STATUS_WORD__GET((pmbus_status_loop_idx_t)PMBUS_PAGE_1);

	if ( ( (data & (~(1<<(uint16_t)PMBUS_STATUS_POWER_GOOD)) ) >> 8 ) == 0)
10024122:	0a22      	lsrs	r2, r4, #8
10024124:	4b0f      	ldr	r3, [pc, #60]	; (10024164 <status_word_update+0x6c>)
10024126:	421a      	tst	r2, r3
10024128:	d101      	bne.n	1002412e <status_word_update+0x36>
	{
		data &= ~1;	// to clear 1sr bit NONE_OF_THE_ABOVE
1002412a:	2301      	movs	r3, #1
1002412c:	439c      	bics	r4, r3
	}

	PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)PMBUS_PAGE_1, PMBUS_CMDCODE_STATUS_WORD, (uint16_t)data);
1002412e:	b2a2      	uxth	r2, r4
10024130:	2179      	movs	r1, #121	; 0x79
10024132:	2001      	movs	r0, #1
10024134:	f7dd fbc6 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
	PMBUS_Set_Command_Byte((PMBUS_PAGE_W_BROADCAST_t)PMBUS_PAGE_1, PMBUS_CMDCODE_STATUS_BYTE, (uint8_t)data);
10024138:	b2e2      	uxtb	r2, r4
1002413a:	2178      	movs	r1, #120	; 0x78
1002413c:	2001      	movs	r0, #1
1002413e:	f7dd fb7b 	bl	10001838 <PMBUS_Log_Error+0x73>
10024142:	4b0a      	ldr	r3, [pc, #40]	; (1002416c <status_word_update+0x74>)
10024144:	681a      	ldr	r2, [r3, #0]
	uint32_t * base_addr = __PMBUS_STATUS_VOUT__ADDRESS((pmbus_status_loop_idx_t)PMBUS_PAGE_0);  // base offset to start from
	uint32_t * register_offset = base_addr + (cmd - PMBUS_CMDCODE_STATUS_VOUT) * 	// index from cmd argument
		(iout_addr - __PMBUS_STATUS_VOUT__ADDRESS((pmbus_status_loop_idx_t)PMBUS_PAGE_0));  // offset between registers

	latch_data = (uint8_t)HAL_GET32(register_offset);
	PMBUS_Set_Command_Byte(PMBUS_PAGE_WB_0, cmd, latch_data);
10024146:	b2d2      	uxtb	r2, r2
10024148:	217f      	movs	r1, #127	; 0x7f
1002414a:	2000      	movs	r0, #0
1002414c:	f7dd fb74 	bl	10001838 <PMBUS_Log_Error+0x73>
10024150:	4b07      	ldr	r3, [pc, #28]	; (10024170 <status_word_update+0x78>)
10024152:	681a      	ldr	r2, [r3, #0]
	base_addr = __PMBUS_STATUS_VOUT__ADDRESS((pmbus_status_loop_idx_t)PMBUS_PAGE_1);  // base offset to start from
	register_offset = base_addr + (cmd - PMBUS_CMDCODE_STATUS_VOUT) * 	// index from cmd argument
		(iout_addr - __PMBUS_STATUS_VOUT__ADDRESS((pmbus_status_loop_idx_t)PMBUS_PAGE_1));  // offset between registers

	latch_data = (uint8_t)HAL_GET32(register_offset);
	PMBUS_Set_Command_Byte(PMBUS_PAGE_WB_1, cmd, latch_data);
10024154:	b2d2      	uxtb	r2, r2
10024156:	217f      	movs	r1, #127	; 0x7f
10024158:	2001      	movs	r0, #1
1002415a:	f7dd fb6d 	bl	10001838 <PMBUS_Log_Error+0x73>

}
1002415e:	bd10      	pop	{r4, pc}
10024160:	70080100 	.word	0x70080100
10024164:	00fffff7 	.word	0x00fffff7
10024168:	70080104 	.word	0x70080104
1002416c:	70080130 	.word	0x70080130
10024170:	70080134 	.word	0x70080134

10024174 <USER_Thread>:
{
10024174:	b510      	push	{r4, lr}
		status_word_update();
10024176:	f7ff ffbf 	bl	100240f8 <status_word_update>
1002417a:	e7fc      	b.n	10024176 <USER_Thread+0x2>

1002417c <memcpy>:
1002417c:	b5f0      	push	{r4, r5, r6, r7, lr}
1002417e:	0005      	movs	r5, r0
10024180:	2a0f      	cmp	r2, #15
10024182:	d92f      	bls.n	100241e4 <memcpy+0x68>
10024184:	000b      	movs	r3, r1
10024186:	4303      	orrs	r3, r0
10024188:	079b      	lsls	r3, r3, #30
1002418a:	d134      	bne.n	100241f6 <memcpy+0x7a>
1002418c:	0016      	movs	r6, r2
1002418e:	000c      	movs	r4, r1
10024190:	0003      	movs	r3, r0
10024192:	3e10      	subs	r6, #16
10024194:	0935      	lsrs	r5, r6, #4
10024196:	3501      	adds	r5, #1
10024198:	012d      	lsls	r5, r5, #4
1002419a:	1945      	adds	r5, r0, r5
1002419c:	6827      	ldr	r7, [r4, #0]
1002419e:	601f      	str	r7, [r3, #0]
100241a0:	6867      	ldr	r7, [r4, #4]
100241a2:	605f      	str	r7, [r3, #4]
100241a4:	68a7      	ldr	r7, [r4, #8]
100241a6:	609f      	str	r7, [r3, #8]
100241a8:	68e7      	ldr	r7, [r4, #12]
100241aa:	3410      	adds	r4, #16
100241ac:	60df      	str	r7, [r3, #12]
100241ae:	3310      	adds	r3, #16
100241b0:	429d      	cmp	r5, r3
100241b2:	d1f3      	bne.n	1002419c <memcpy+0x20>
100241b4:	230f      	movs	r3, #15
100241b6:	439e      	bics	r6, r3
100241b8:	3610      	adds	r6, #16
100241ba:	1985      	adds	r5, r0, r6
100241bc:	1989      	adds	r1, r1, r6
100241be:	4013      	ands	r3, r2
100241c0:	2b03      	cmp	r3, #3
100241c2:	d91a      	bls.n	100241fa <memcpy+0x7e>
100241c4:	1f1e      	subs	r6, r3, #4
100241c6:	2300      	movs	r3, #0
100241c8:	08b4      	lsrs	r4, r6, #2
100241ca:	3401      	adds	r4, #1
100241cc:	00a4      	lsls	r4, r4, #2
100241ce:	58cf      	ldr	r7, [r1, r3]
100241d0:	50ef      	str	r7, [r5, r3]
100241d2:	3304      	adds	r3, #4
100241d4:	42a3      	cmp	r3, r4
100241d6:	d1fa      	bne.n	100241ce <memcpy+0x52>
100241d8:	2403      	movs	r4, #3
100241da:	43a6      	bics	r6, r4
100241dc:	1d33      	adds	r3, r6, #4
100241de:	4022      	ands	r2, r4
100241e0:	18c9      	adds	r1, r1, r3
100241e2:	18ed      	adds	r5, r5, r3
100241e4:	2a00      	cmp	r2, #0
100241e6:	d005      	beq.n	100241f4 <memcpy+0x78>
100241e8:	2300      	movs	r3, #0
100241ea:	5ccc      	ldrb	r4, [r1, r3]
100241ec:	54ec      	strb	r4, [r5, r3]
100241ee:	3301      	adds	r3, #1
100241f0:	4293      	cmp	r3, r2
100241f2:	d1fa      	bne.n	100241ea <memcpy+0x6e>
100241f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100241f6:	0005      	movs	r5, r0
100241f8:	e7f6      	b.n	100241e8 <memcpy+0x6c>
100241fa:	001a      	movs	r2, r3
100241fc:	e7f2      	b.n	100241e4 <memcpy+0x68>
100241fe:	46c0      	nop			; (mov r8, r8)

10024200 <memset>:
10024200:	b5f0      	push	{r4, r5, r6, r7, lr}
10024202:	0783      	lsls	r3, r0, #30
10024204:	d043      	beq.n	1002428e <memset+0x8e>
10024206:	1e54      	subs	r4, r2, #1
10024208:	2a00      	cmp	r2, #0
1002420a:	d03f      	beq.n	1002428c <memset+0x8c>
1002420c:	b2ce      	uxtb	r6, r1
1002420e:	0002      	movs	r2, r0
10024210:	2503      	movs	r5, #3
10024212:	e002      	b.n	1002421a <memset+0x1a>
10024214:	001a      	movs	r2, r3
10024216:	3c01      	subs	r4, #1
10024218:	d338      	bcc.n	1002428c <memset+0x8c>
1002421a:	1c53      	adds	r3, r2, #1
1002421c:	7016      	strb	r6, [r2, #0]
1002421e:	422b      	tst	r3, r5
10024220:	d1f8      	bne.n	10024214 <memset+0x14>
10024222:	2c03      	cmp	r4, #3
10024224:	d92a      	bls.n	1002427c <memset+0x7c>
10024226:	22ff      	movs	r2, #255	; 0xff
10024228:	400a      	ands	r2, r1
1002422a:	0215      	lsls	r5, r2, #8
1002422c:	4315      	orrs	r5, r2
1002422e:	042a      	lsls	r2, r5, #16
10024230:	4315      	orrs	r5, r2
10024232:	2c0f      	cmp	r4, #15
10024234:	d914      	bls.n	10024260 <memset+0x60>
10024236:	0027      	movs	r7, r4
10024238:	001a      	movs	r2, r3
1002423a:	3f10      	subs	r7, #16
1002423c:	093e      	lsrs	r6, r7, #4
1002423e:	3601      	adds	r6, #1
10024240:	0136      	lsls	r6, r6, #4
10024242:	199e      	adds	r6, r3, r6
10024244:	6015      	str	r5, [r2, #0]
10024246:	6055      	str	r5, [r2, #4]
10024248:	6095      	str	r5, [r2, #8]
1002424a:	60d5      	str	r5, [r2, #12]
1002424c:	3210      	adds	r2, #16
1002424e:	4296      	cmp	r6, r2
10024250:	d1f8      	bne.n	10024244 <memset+0x44>
10024252:	220f      	movs	r2, #15
10024254:	4397      	bics	r7, r2
10024256:	3710      	adds	r7, #16
10024258:	19db      	adds	r3, r3, r7
1002425a:	4014      	ands	r4, r2
1002425c:	2c03      	cmp	r4, #3
1002425e:	d90d      	bls.n	1002427c <memset+0x7c>
10024260:	001a      	movs	r2, r3
10024262:	1f27      	subs	r7, r4, #4
10024264:	08be      	lsrs	r6, r7, #2
10024266:	3601      	adds	r6, #1
10024268:	00b6      	lsls	r6, r6, #2
1002426a:	199e      	adds	r6, r3, r6
1002426c:	c220      	stmia	r2!, {r5}
1002426e:	42b2      	cmp	r2, r6
10024270:	d1fc      	bne.n	1002426c <memset+0x6c>
10024272:	2203      	movs	r2, #3
10024274:	4397      	bics	r7, r2
10024276:	3704      	adds	r7, #4
10024278:	19db      	adds	r3, r3, r7
1002427a:	4014      	ands	r4, r2
1002427c:	2c00      	cmp	r4, #0
1002427e:	d005      	beq.n	1002428c <memset+0x8c>
10024280:	b2c9      	uxtb	r1, r1
10024282:	191c      	adds	r4, r3, r4
10024284:	7019      	strb	r1, [r3, #0]
10024286:	3301      	adds	r3, #1
10024288:	429c      	cmp	r4, r3
1002428a:	d1fb      	bne.n	10024284 <memset+0x84>
1002428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1002428e:	0014      	movs	r4, r2
10024290:	0003      	movs	r3, r0
10024292:	e7c6      	b.n	10024222 <memset+0x22>

10024294 <os_thread_def_USER_Thread>:
10024294:	4175 1002 0000 0000 0001 0000 04b0 0000     uA..............
