
.\build\patch/patch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bss          00000074  20063800  20063800  00023800  2**2
                  ALLOC
  1 .otp_data     00004000  10020000  10020000  00010000  2**0
                  ALLOC
  2 .otp_header   0000001c  10024000  10024000  00010000  2**0
                  ALLOC
  3 .txt          00000240  1002401c  1002401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .otp_patch2   00004000  1002425c  1002425c  0001425c  2**0
                  ALLOC
  5 .otp_patch3   00004000  1002825c  1002825c  0001425c  2**0
                  ALLOC
  6 .debug_info   00017dc4  00000000  00000000  0001425c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa8  00000000  00000000  0002c020  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000019a  00000000  00000000  0002cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000f0  00000000  00000000  0002d162  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  0002d252  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000a3a3  00000000  00000000  0002d2e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002efa  00000000  00000000  00037685  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00064f32  00000000  00000000  0003a57f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007f  00000000  00000000  0009f4b1  2**0
                  CONTENTS, READONLY
 15 .ARM.attributes 00000031  00000000  00000000  0009f530  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000001b0  00000000  00000000  0009f564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .txt:

1002401c <patch_entry>:
/**
 * This is the patch entry point, which is called after the patch got
 * successfully loaded into RAM.
 */
void patch_entry(void)
{
1002401c:	b510      	push	{r4, lr}
    // Initialize the .bss and .data section
    memset(SECTION_BASE_ZI, 0, SECTION_LENGTH_ZI);
1002401e:	480c      	ldr	r0, [pc, #48]	; (10024050 <patch_entry+0x34>)
10024020:	4a0c      	ldr	r2, [pc, #48]	; (10024054 <patch_entry+0x38>)
10024022:	1a12      	subs	r2, r2, r0
10024024:	2100      	movs	r1, #0
10024026:	f000 f8c9 	bl	100241bc <memset>
    memcpy(SECTION_BASE_RW_DESTINATION, SECTION_BASE_RW_SOURCE, SECTION_LENGTH_RW);
1002402a:	480b      	ldr	r0, [pc, #44]	; (10024058 <patch_entry+0x3c>)
1002402c:	4a0b      	ldr	r2, [pc, #44]	; (1002405c <patch_entry+0x40>)
1002402e:	1a12      	subs	r2, r2, r0
10024030:	490b      	ldr	r1, [pc, #44]	; (10024060 <patch_entry+0x44>)
10024032:	f000 f881 	bl	10024138 <memcpy>
    // Initialize ram execution section
    memcpy(SECTION_BASE_RAM_EXEC_DESTINATION, SECTION_BASE_RAM_EXEC_SOURCE, SECTION_LENGTH_RAM_EXEC);
10024036:	480b      	ldr	r0, [pc, #44]	; (10024064 <patch_entry+0x48>)
10024038:	4a0b      	ldr	r2, [pc, #44]	; (10024068 <patch_entry+0x4c>)
1002403a:	1a12      	subs	r2, r2, r0
1002403c:	490b      	ldr	r1, [pc, #44]	; (1002406c <patch_entry+0x50>)
1002403e:	f000 f87b 	bl	10024138 <memcpy>
/* lint requires us to have both a declaration and a definition ... we
 * could probably bail out through some local lint, but her we simply
 * play to the rules.
 */
HAL_INLINE void HAL_SET32(volatile uint32_t* addr, uint32_t val) {
    *addr = val;
10024042:	4a0b      	ldr	r2, [pc, #44]	; (10024070 <patch_entry+0x54>)
10024044:	4b0b      	ldr	r3, [pc, #44]	; (10024074 <patch_entry+0x58>)
10024046:	601a      	str	r2, [r3, #0]


    SCU_SPARE_FF__SET(0x5971BBBBUL);  // write the patch id to SCU spare for simple test that patch loaded
    user_drv_init();
10024048:	f000 f858 	bl	100240fc <user_drv_init>
}
1002404c:	bd10      	pop	{r4, pc}
1002404e:	46c0      	nop			; (mov r8, r8)
10024050:	20063800 	.word	0x20063800
10024054:	20063874 	.word	0x20063874
10024058:	20063800 	.word	0x20063800
1002405c:	20063800 	.word	0x20063800
10024060:	1002425c 	.word	0x1002425c
10024064:	20063874 	.word	0x20063874
10024068:	20063874 	.word	0x20063874
1002406c:	1002425c 	.word	0x1002425c
10024070:	5971bbbb 	.word	0x5971bbbb
10024074:	40000020 	.word	0x40000020

10024078 <add_on_features_init>:
#include "pmbus_mfr_autogen.h"

void add_on_features_init (void)
{
	uint8_t test1 = 0;
}
10024078:	4770      	bx	lr
	...

1002407c <hello_world>:
/**
 * Hello World Example
 * Function to configure UART pin, setting and send a Hello World string.
 */
void hello_world(void)
{
1002407c:	b570      	push	{r4, r5, r6, lr}
1002407e:	b084      	sub	sp, #16
	char userstring[] = "Hello World";
10024080:	ac01      	add	r4, sp, #4
10024082:	4b11      	ldr	r3, [pc, #68]	; (100240c8 <hello_world+0x4c>)
10024084:	0022      	movs	r2, r4
10024086:	cb23      	ldmia	r3!, {r0, r1, r5}
10024088:	c223      	stmia	r2!, {r0, r1, r5}
1002408a:	2280      	movs	r2, #128	; 0x80
1002408c:	04d2      	lsls	r2, r2, #19
1002408e:	4b0f      	ldr	r3, [pc, #60]	; (100240cc <hello_world+0x50>)
10024090:	601a      	str	r2, [r3, #0]
10024092:	2224      	movs	r2, #36	; 0x24
10024094:	4b0e      	ldr	r3, [pc, #56]	; (100240d0 <hello_world+0x54>)
10024096:	601a      	str	r2, [r3, #0]
	// MP_FUNC4 [5] 	pwm6_ppen			: 1 - CMOS output
	COMMON_MP_FUNC4__SET(0X00000024);

#endif
	UARTdriver = &Driver_UART;
	UARTdriver->Initialize(NULL);
10024098:	4d0e      	ldr	r5, [pc, #56]	; (100240d4 <hello_world+0x58>)
1002409a:	2000      	movs	r0, #0
1002409c:	68ab      	ldr	r3, [r5, #8]
1002409e:	4798      	blx	r3
	UARTdriver->PowerControl (POWER_FULL);
100240a0:	2002      	movs	r0, #2
100240a2:	692b      	ldr	r3, [r5, #16]
100240a4:	4798      	blx	r3

	control = ARM_USART_MODE_ASYNCHRONOUS | ARM_USART_DATA_BITS_8 | ARM_USART_PARITY_NONE |
				ARM_USART_STOP_BITS_1 | ARM_USART_FLOW_CONTROL_NONE | ARM_USART_TXIFLSEL_7_8;

	UARTdriver->Control (control, 115200);
100240a6:	6aae      	ldr	r6, [r5, #40]	; 0x28
100240a8:	21e1      	movs	r1, #225	; 0xe1
100240aa:	0249      	lsls	r1, r1, #9
100240ac:	480a      	ldr	r0, [pc, #40]	; (100240d8 <hello_world+0x5c>)
100240ae:	47b0      	blx	r6
	UARTdriver->Control (ARM_USART_CONTROL_TX,1);
100240b0:	2101      	movs	r1, #1
100240b2:	2015      	movs	r0, #21
100240b4:	47b0      	blx	r6
	UARTdriver->Control (ARM_USART_CONTROL_RX,1);
100240b6:	2101      	movs	r1, #1
100240b8:	2016      	movs	r0, #22
100240ba:	47b0      	blx	r6

	UARTdriver->Send(&userstring, 11);
100240bc:	696b      	ldr	r3, [r5, #20]
100240be:	210b      	movs	r1, #11
100240c0:	0020      	movs	r0, r4
100240c2:	4798      	blx	r3
}
100240c4:	b004      	add	sp, #16
100240c6:	bd70      	pop	{r4, r5, r6, pc}
100240c8:	10024250 	.word	0x10024250
100240cc:	7000300c 	.word	0x7000300c
100240d0:	70003010 	.word	0x70003010
100240d4:	100055f8 	.word	0x100055f8
100240d8:	02000001 	.word	0x02000001

100240dc <pmbus_mfr_autogen_init>:
 */
void pmbus_mfr_autogen_init(void)
{


}
100240dc:	4770      	bx	lr

100240de <AT_TARGET_ENABLE>:
}

void AT_TARGET_ENABLE(PMBUS_PAGE_t loop)
{

}
100240de:	4770      	bx	lr

100240e0 <regulation_sm_callbacks_init>:
{
100240e0:	b510      	push	{r4, lr}
	Regulation_set_regulation_event_cb(REGULATION_STATE_AT_TARGET_VID, REGULATION_CONTROLS_ENABLE,
100240e2:	4a03      	ldr	r2, [pc, #12]	; (100240f0 <regulation_sm_callbacks_init+0x10>)
100240e4:	2109      	movs	r1, #9
100240e6:	2003      	movs	r0, #3
100240e8:	f7e3 fd3a 	bl	10007b60 <Regulation_set_fsw_irq_event_cb+0x2b>
}
100240ec:	bd10      	pop	{r4, pc}
100240ee:	46c0      	nop			; (mov r8, r8)
100240f0:	100240df 	.word	0x100240df

100240f4 <patch_pmbus_mfr_autogen_init>:

void patch_pmbus_mfr_autogen_init(void);


void patch_pmbus_mfr_autogen_init(void)
{
100240f4:	b510      	push	{r4, lr}
	pmbus_mfr_autogen_init();
100240f6:	f7ff fff1 	bl	100240dc <pmbus_mfr_autogen_init>
}
100240fa:	bd10      	pop	{r4, pc}

100240fc <user_drv_init>:
 * Main entry point of the user application.  Good place to set breakpoint when debugging a patch.
 * This will only get executed a single time prior to configuration loading and before RTOS starts
 */

void user_drv_init(void)
{
100240fc:	b510      	push	{r4, lr}
	memset(&user_data, 0, sizeof(USER_DATA_t));  // ZI the user data
100240fe:	2274      	movs	r2, #116	; 0x74
10024100:	2100      	movs	r1, #0
10024102:	4809      	ldr	r0, [pc, #36]	; (10024128 <user_drv_init+0x2c>)
10024104:	f000 f85a 	bl	100241bc <memset>

	// this is the initialization of user pmbus commands autogenerated from pmbus spreadsheet
	ptr_mfr_specific_init = (mfr_specific_init_ptr) patch_pmbus_mfr_autogen_init;
10024108:	4a08      	ldr	r2, [pc, #32]	; (1002412c <user_drv_init+0x30>)
1002410a:	4b09      	ldr	r3, [pc, #36]	; (10024130 <user_drv_init+0x34>)
1002410c:	601a      	str	r2, [r3, #0]

	// set the pointer funtion in init of regulation state machine to user callback setup for each state
	set_module_init_cb(MODULE_REGULATION, regulation_sm_callbacks_init);
1002410e:	4909      	ldr	r1, [pc, #36]	; (10024134 <user_drv_init+0x38>)
10024110:	2002      	movs	r0, #2
10024112:	f7e0 fbeb 	bl	100048ec <scratchpad_semaphore_release+0x33>

	add_on_features_init();
10024116:	f7ff ffaf 	bl	10024078 <add_on_features_init>
	regulation_sm_callbacks_init();
1002411a:	f7ff ffe1 	bl	100240e0 <regulation_sm_callbacks_init>
	pmbus_mfr_autogen_init();
1002411e:	f7ff ffdd 	bl	100240dc <pmbus_mfr_autogen_init>
	patch_pmbus_mfr_autogen_init();

	/* Hello World Example Modification Start */
	hello_world();
10024122:	f7ff ffab 	bl	1002407c <hello_world>
	/* Hello World Example Modification End */
}
10024126:	bd10      	pop	{r4, pc}
10024128:	20063800 	.word	0x20063800
1002412c:	100240f5 	.word	0x100240f5
10024130:	2005d468 	.word	0x2005d468
10024134:	100240e1 	.word	0x100240e1

10024138 <memcpy>:
10024138:	b5f0      	push	{r4, r5, r6, r7, lr}
1002413a:	0005      	movs	r5, r0
1002413c:	2a0f      	cmp	r2, #15
1002413e:	d92f      	bls.n	100241a0 <memcpy+0x68>
10024140:	000b      	movs	r3, r1
10024142:	4303      	orrs	r3, r0
10024144:	079b      	lsls	r3, r3, #30
10024146:	d134      	bne.n	100241b2 <memcpy+0x7a>
10024148:	0016      	movs	r6, r2
1002414a:	000c      	movs	r4, r1
1002414c:	0003      	movs	r3, r0
1002414e:	3e10      	subs	r6, #16
10024150:	0935      	lsrs	r5, r6, #4
10024152:	3501      	adds	r5, #1
10024154:	012d      	lsls	r5, r5, #4
10024156:	1945      	adds	r5, r0, r5
10024158:	6827      	ldr	r7, [r4, #0]
1002415a:	601f      	str	r7, [r3, #0]
1002415c:	6867      	ldr	r7, [r4, #4]
1002415e:	605f      	str	r7, [r3, #4]
10024160:	68a7      	ldr	r7, [r4, #8]
10024162:	609f      	str	r7, [r3, #8]
10024164:	68e7      	ldr	r7, [r4, #12]
10024166:	3410      	adds	r4, #16
10024168:	60df      	str	r7, [r3, #12]
1002416a:	3310      	adds	r3, #16
1002416c:	429d      	cmp	r5, r3
1002416e:	d1f3      	bne.n	10024158 <memcpy+0x20>
10024170:	230f      	movs	r3, #15
10024172:	439e      	bics	r6, r3
10024174:	3610      	adds	r6, #16
10024176:	1985      	adds	r5, r0, r6
10024178:	1989      	adds	r1, r1, r6
1002417a:	4013      	ands	r3, r2
1002417c:	2b03      	cmp	r3, #3
1002417e:	d91a      	bls.n	100241b6 <memcpy+0x7e>
10024180:	1f1e      	subs	r6, r3, #4
10024182:	2300      	movs	r3, #0
10024184:	08b4      	lsrs	r4, r6, #2
10024186:	3401      	adds	r4, #1
10024188:	00a4      	lsls	r4, r4, #2
1002418a:	58cf      	ldr	r7, [r1, r3]
1002418c:	50ef      	str	r7, [r5, r3]
1002418e:	3304      	adds	r3, #4
10024190:	42a3      	cmp	r3, r4
10024192:	d1fa      	bne.n	1002418a <memcpy+0x52>
10024194:	2403      	movs	r4, #3
10024196:	43a6      	bics	r6, r4
10024198:	1d33      	adds	r3, r6, #4
1002419a:	4022      	ands	r2, r4
1002419c:	18c9      	adds	r1, r1, r3
1002419e:	18ed      	adds	r5, r5, r3
100241a0:	2a00      	cmp	r2, #0
100241a2:	d005      	beq.n	100241b0 <memcpy+0x78>
100241a4:	2300      	movs	r3, #0
100241a6:	5ccc      	ldrb	r4, [r1, r3]
100241a8:	54ec      	strb	r4, [r5, r3]
100241aa:	3301      	adds	r3, #1
100241ac:	4293      	cmp	r3, r2
100241ae:	d1fa      	bne.n	100241a6 <memcpy+0x6e>
100241b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100241b2:	0005      	movs	r5, r0
100241b4:	e7f6      	b.n	100241a4 <memcpy+0x6c>
100241b6:	001a      	movs	r2, r3
100241b8:	e7f2      	b.n	100241a0 <memcpy+0x68>
100241ba:	46c0      	nop			; (mov r8, r8)

100241bc <memset>:
100241bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100241be:	0783      	lsls	r3, r0, #30
100241c0:	d043      	beq.n	1002424a <memset+0x8e>
100241c2:	1e54      	subs	r4, r2, #1
100241c4:	2a00      	cmp	r2, #0
100241c6:	d03f      	beq.n	10024248 <memset+0x8c>
100241c8:	b2ce      	uxtb	r6, r1
100241ca:	0002      	movs	r2, r0
100241cc:	2503      	movs	r5, #3
100241ce:	e002      	b.n	100241d6 <memset+0x1a>
100241d0:	001a      	movs	r2, r3
100241d2:	3c01      	subs	r4, #1
100241d4:	d338      	bcc.n	10024248 <memset+0x8c>
100241d6:	1c53      	adds	r3, r2, #1
100241d8:	7016      	strb	r6, [r2, #0]
100241da:	422b      	tst	r3, r5
100241dc:	d1f8      	bne.n	100241d0 <memset+0x14>
100241de:	2c03      	cmp	r4, #3
100241e0:	d92a      	bls.n	10024238 <memset+0x7c>
100241e2:	22ff      	movs	r2, #255	; 0xff
100241e4:	400a      	ands	r2, r1
100241e6:	0215      	lsls	r5, r2, #8
100241e8:	4315      	orrs	r5, r2
100241ea:	042a      	lsls	r2, r5, #16
100241ec:	4315      	orrs	r5, r2
100241ee:	2c0f      	cmp	r4, #15
100241f0:	d914      	bls.n	1002421c <memset+0x60>
100241f2:	0027      	movs	r7, r4
100241f4:	001a      	movs	r2, r3
100241f6:	3f10      	subs	r7, #16
100241f8:	093e      	lsrs	r6, r7, #4
100241fa:	3601      	adds	r6, #1
100241fc:	0136      	lsls	r6, r6, #4
100241fe:	199e      	adds	r6, r3, r6
10024200:	6015      	str	r5, [r2, #0]
10024202:	6055      	str	r5, [r2, #4]
10024204:	6095      	str	r5, [r2, #8]
10024206:	60d5      	str	r5, [r2, #12]
10024208:	3210      	adds	r2, #16
1002420a:	4296      	cmp	r6, r2
1002420c:	d1f8      	bne.n	10024200 <memset+0x44>
1002420e:	220f      	movs	r2, #15
10024210:	4397      	bics	r7, r2
10024212:	3710      	adds	r7, #16
10024214:	19db      	adds	r3, r3, r7
10024216:	4014      	ands	r4, r2
10024218:	2c03      	cmp	r4, #3
1002421a:	d90d      	bls.n	10024238 <memset+0x7c>
1002421c:	001a      	movs	r2, r3
1002421e:	1f27      	subs	r7, r4, #4
10024220:	08be      	lsrs	r6, r7, #2
10024222:	3601      	adds	r6, #1
10024224:	00b6      	lsls	r6, r6, #2
10024226:	199e      	adds	r6, r3, r6
10024228:	c220      	stmia	r2!, {r5}
1002422a:	42b2      	cmp	r2, r6
1002422c:	d1fc      	bne.n	10024228 <memset+0x6c>
1002422e:	2203      	movs	r2, #3
10024230:	4397      	bics	r7, r2
10024232:	3704      	adds	r7, #4
10024234:	19db      	adds	r3, r3, r7
10024236:	4014      	ands	r4, r2
10024238:	2c00      	cmp	r4, #0
1002423a:	d005      	beq.n	10024248 <memset+0x8c>
1002423c:	b2c9      	uxtb	r1, r1
1002423e:	191c      	adds	r4, r3, r4
10024240:	7019      	strb	r1, [r3, #0]
10024242:	3301      	adds	r3, #1
10024244:	429c      	cmp	r4, r3
10024246:	d1fb      	bne.n	10024240 <memset+0x84>
10024248:	bdf0      	pop	{r4, r5, r6, r7, pc}
1002424a:	0014      	movs	r4, r2
1002424c:	0003      	movs	r3, r0
1002424e:	e7c6      	b.n	100241de <memset+0x22>
10024250:	6c6c6548 	.word	0x6c6c6548
10024254:	6f57206f 	.word	0x6f57206f
10024258:	00646c72 	.word	0x00646c72
