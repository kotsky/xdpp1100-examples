
.\build\patch/patch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bss          00000074  20063800  20063800  00023800  2**2
                  ALLOC
  1 .otp_data     00004000  10020000  10020000  00010000  2**0
                  ALLOC
  2 .otp_header   0000001c  10024000  10024000  00010000  2**0
                  ALLOC
  3 .txt          0000084c  1002401c  1002401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .otp_patch2   00004000  10024868  10024868  00014868  2**0
                  ALLOC
  5 .otp_patch3   00004000  10028868  10028868  00014868  2**0
                  ALLOC
  6 .debug_info   000162b9  00000000  00000000  00014868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e81  00000000  00000000  0002ab21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000fc7  00000000  00000000  0002b9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000000e0  00000000  00000000  0002c969  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000270  00000000  00000000  0002ca49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009fdb  00000000  00000000  0002ccb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002711  00000000  00000000  00036c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000650d6  00000000  00000000  000393a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007f  00000000  00000000  0009e47b  2**0
                  CONTENTS, READONLY
 15 .ARM.attributes 00000031  00000000  00000000  0009e4fa  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000001c8  00000000  00000000  0009e52c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .txt:

1002401c <patch_entry>:
/**
 * This is the patch entry point, which is called after the patch got
 * successfully loaded into RAM.
 */
void patch_entry(void)
{
1002401c:	b510      	push	{r4, lr}
    // Initialize the .bss and .data section
    memset(SECTION_BASE_ZI, 0, SECTION_LENGTH_ZI);
1002401e:	480c      	ldr	r0, [pc, #48]	; (10024050 <patch_entry+0x34>)
10024020:	4a0c      	ldr	r2, [pc, #48]	; (10024054 <patch_entry+0x38>)
10024022:	1a12      	subs	r2, r2, r0
10024024:	2100      	movs	r1, #0
10024026:	f000 fbc9 	bl	100247bc <memset>
    memcpy(SECTION_BASE_RW_DESTINATION, SECTION_BASE_RW_SOURCE, SECTION_LENGTH_RW);
1002402a:	480b      	ldr	r0, [pc, #44]	; (10024058 <patch_entry+0x3c>)
1002402c:	4a0b      	ldr	r2, [pc, #44]	; (1002405c <patch_entry+0x40>)
1002402e:	1a12      	subs	r2, r2, r0
10024030:	490b      	ldr	r1, [pc, #44]	; (10024060 <patch_entry+0x44>)
10024032:	f000 fb81 	bl	10024738 <memcpy>
    // Initialize ram execution section
    memcpy(SECTION_BASE_RAM_EXEC_DESTINATION, SECTION_BASE_RAM_EXEC_SOURCE, SECTION_LENGTH_RAM_EXEC);
10024036:	480b      	ldr	r0, [pc, #44]	; (10024064 <patch_entry+0x48>)
10024038:	4a0b      	ldr	r2, [pc, #44]	; (10024068 <patch_entry+0x4c>)
1002403a:	1a12      	subs	r2, r2, r0
1002403c:	490b      	ldr	r1, [pc, #44]	; (1002406c <patch_entry+0x50>)
1002403e:	f000 fb7b 	bl	10024738 <memcpy>
/* lint requires us to have both a declaration and a definition ... we
 * could probably bail out through some local lint, but her we simply
 * play to the rules.
 */
HAL_INLINE void HAL_SET32(volatile uint32_t* addr, uint32_t val) {
    *addr = val;
10024042:	4a0b      	ldr	r2, [pc, #44]	; (10024070 <patch_entry+0x54>)
10024044:	4b0b      	ldr	r3, [pc, #44]	; (10024074 <patch_entry+0x58>)
10024046:	601a      	str	r2, [r3, #0]


    SCU_SPARE_FF__SET(0x5971BBBBUL);  // write the patch id to SCU spare for simple test that patch loaded
    user_drv_init();
10024048:	f000 fb50 	bl	100246ec <user_drv_init>
}
1002404c:	bd10      	pop	{r4, pc}
1002404e:	46c0      	nop			; (mov r8, r8)
10024050:	20063800 	.word	0x20063800
10024054:	20063874 	.word	0x20063874
10024058:	20063800 	.word	0x20063800
1002405c:	20063800 	.word	0x20063800
10024060:	10024868 	.word	0x10024868
10024064:	20063874 	.word	0x20063874
10024068:	20063874 	.word	0x20063874
1002406c:	10024868 	.word	0x10024868
10024070:	5971bbbb 	.word	0x5971bbbb
10024074:	40000020 	.word	0x40000020

10024078 <add_on_features_init>:
#include "pmbus_mfr_autogen.h"

void add_on_features_init (void)
{
	uint8_t test1 = 0;
}
10024078:	4770      	bx	lr
	...

1002407c <input_current_correction>:
 * @param iin_read_exp exponents of Iin
 * @param loop selects the input_current_correction block to operate on
 */

uint32_t input_current_correction(int8_t vin_read_exp, int8_t iin_read_exp, int8_t power_read_exp, uint32_t vin, uint32_t pout)
{
1002407c:	b570      	push	{r4, r5, r6, lr}
1002407e:	000c      	movs	r4, r1
10024080:	0015      	movs	r5, r2
	// Refer to example_efficiency_table_current_correction.zip and
	// "Efficiency Look-Up Table and Input Current Correction Look-Up Table" in "XDPP1100 Firmware Examples.pdf"
	uint8_t efficiency = 0xEA;		// in U0.8 format 0xEA or 234 => efficiency = 0.9140625

	uint32_t prod_vin_eff;
	prod_vin_eff = vin*efficiency;	//u7.vin_exp*u0.8 = u7.(8+vin_exp)
10024082:	22ea      	movs	r2, #234	; 0xea
10024084:	4353      	muls	r3, r2
		exponent = -exponent;
		value = value >> (exponent);
	}
	else
	{
		value = value << (exponent);
10024086:	0019      	movs	r1, r3
10024088:	4081      	lsls	r1, r0
	if ( exponent <= 0)
1002408a:	2800      	cmp	r0, #0
1002408c:	dd11      	ble.n	100240b2 <input_current_correction+0x36>
		reqrd_shift = (reqrd_shift - iin_exp_shift);
	}
	else
	{
		iin_exp_shift = iin_read_exp; // 128 is a dummy number to avoid implementing this for positive exp
		reqrd_shift = reqrd_shift + iin_exp_shift;
1002408e:	3410      	adds	r4, #16
10024090:	b2a4      	uxth	r4, r4
	one_div_prod_vin_eff = (1U<<24) / (prod_vin_eff);  //24 also includes the 2^8 accounted form efficiency, so this will be X.16
10024092:	2080      	movs	r0, #128	; 0x80
10024094:	0440      	lsls	r0, r0, #17
10024096:	f7dc f9a4 	bl	100003e2 <__aeabi_uidivmod>
	}
	prod_pout_one_div_vin_eff = SHIFT_EXPONENT_UNSIGNED(one_div_prod_vin_eff*pout, power_read_exp);
1002409a:	9b04      	ldr	r3, [sp, #16]
1002409c:	4343      	muls	r3, r0
		value = value << (exponent);
1002409e:	0018      	movs	r0, r3
100240a0:	40a8      	lsls	r0, r5
	if ( exponent <= 0)
100240a2:	2d00      	cmp	r5, #0
100240a4:	dd09      	ble.n	100240ba <input_current_correction+0x3e>
	prod_pout_one_div_vin_eff = prod_pout_one_div_vin_eff >> reqrd_shift;   //for Iin exp = -2, must be right shifted by 14, shift based on exp selected
100240a6:	40e0      	lsrs	r0, r4

	uint32_t iin_corr = prod_pout_one_div_vin_eff;

	if (iin_corr>0x3FF) iin_corr = 0x3FF;

	return iin_corr; 	// max absolute value = 1023
100240a8:	4b06      	ldr	r3, [pc, #24]	; (100240c4 <input_current_correction+0x48>)
100240aa:	4298      	cmp	r0, r3
100240ac:	d900      	bls.n	100240b0 <input_current_correction+0x34>
100240ae:	0018      	movs	r0, r3

}
100240b0:	bd70      	pop	{r4, r5, r6, pc}
		exponent = -exponent;
100240b2:	4240      	negs	r0, r0
		value = value >> (exponent);
100240b4:	40c3      	lsrs	r3, r0
100240b6:	0019      	movs	r1, r3
100240b8:	e7e9      	b.n	1002408e <input_current_correction+0x12>
		exponent = -exponent;
100240ba:	426d      	negs	r5, r5
		value = value >> (exponent);
100240bc:	40eb      	lsrs	r3, r5
100240be:	0018      	movs	r0, r3
100240c0:	e7f1      	b.n	100240a6 <input_current_correction+0x2a>
100240c2:	46c0      	nop			; (mov r8, r8)
100240c4:	000003ff 	.word	0x000003ff

100240c8 <patch_Telemetry_Sample>:

void patch_Telemetry_Sample(void)
{
100240c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100240ca:	46de      	mov	lr, fp
100240cc:	4657      	mov	r7, sl
100240ce:	464e      	mov	r6, r9
100240d0:	4645      	mov	r5, r8
100240d2:	b5e0      	push	{r5, r6, r7, lr}
100240d4:	b093      	sub	sp, #76	; 0x4c
100240d6:	4b4f      	ldr	r3, [pc, #316]	; (10024214 <patch_Telemetry_Sample+0x14c>)
100240d8:	930c      	str	r3, [sp, #48]	; 0x30
100240da:	4b4f      	ldr	r3, [pc, #316]	; (10024218 <patch_Telemetry_Sample+0x150>)
100240dc:	469a      	mov	sl, r3
100240de:	2300      	movs	r3, #0
100240e0:	4698      	mov	r8, r3
	if ((exp & ((1 << numbits) - 1)) >> (numbits-1))
100240e2:	330f      	adds	r3, #15
100240e4:	469b      	mov	fp, r3
100240e6:	4c4d      	ldr	r4, [pc, #308]	; (1002421c <patch_Telemetry_Sample+0x154>)
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
100240e8:	4645      	mov	r5, r8
100240ea:	e0a9      	b.n	10024240 <patch_Telemetry_Sample+0x178>
		return ((int32_t) (exp & ((1 << (numbits-1)) - 1)));
100240ec:	2307      	movs	r3, #7
100240ee:	4018      	ands	r0, r3
100240f0:	e0c7      	b.n	10024282 <patch_Telemetry_Sample+0x1ba>
100240f2:	2307      	movs	r3, #7
100240f4:	4018      	ands	r0, r3
100240f6:	e0d2      	b.n	1002429e <patch_Telemetry_Sample+0x1d6>
100240f8:	2307      	movs	r3, #7
100240fa:	4018      	ands	r0, r3
100240fc:	e0dd      	b.n	100242ba <patch_Telemetry_Sample+0x1f2>
100240fe:	2307      	movs	r3, #7
10024100:	4018      	ands	r0, r3
10024102:	e0e8      	b.n	100242d6 <patch_Telemetry_Sample+0x20e>
10024104:	2303      	movs	r3, #3
10024106:	4018      	ands	r0, r3
10024108:	e0f3      	b.n	100242f2 <patch_Telemetry_Sample+0x22a>
1002410a:	2307      	movs	r3, #7
1002410c:	4018      	ands	r0, r3
1002410e:	e0fe      	b.n	1002430e <patch_Telemetry_Sample+0x246>
		exponent = -exponent;
10024110:	425b      	negs	r3, r3
		value = value >> (exponent);
10024112:	0002      	movs	r2, r0
10024114:	411a      	asrs	r2, r3
10024116:	e108      	b.n	1002432a <patch_Telemetry_Sample+0x262>
		if (pin > 0x3ff) pin = 0x3ff;  // cap value
		TELEM_DATA.pin[loop] = pin;
/* Input current correction Example Modification End */

		if (Telemetry_Get_PMBUS_Configuration((PMBUS_PAGE_t)loop, (TELEMETRY_CONFIG)TELEMETRY_CONFIG_FW_FILTER_EN) == 1) {
			vout = (vout + (uint32_t)(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_READ_VOUT)))>>1;
10024118:	218b      	movs	r1, #139	; 0x8b
1002411a:	9e03      	ldr	r6, [sp, #12]
1002411c:	0030      	movs	r0, r6
1002411e:	f7dd fa9b 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
10024122:	9b04      	ldr	r3, [sp, #16]
10024124:	469c      	mov	ip, r3
10024126:	4460      	add	r0, ip
10024128:	0843      	lsrs	r3, r0, #1
1002412a:	9304      	str	r3, [sp, #16]
			/*lint -e702 */
			iout = (iout + (LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_READ_IOUT))))>>1u;
1002412c:	218c      	movs	r1, #140	; 0x8c
1002412e:	0030      	movs	r0, r6
10024130:	f7dd fa92 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
10024134:	0543      	lsls	r3, r0, #21
10024136:	0d5b      	lsrs	r3, r3, #21
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
10024138:	2280      	movs	r2, #128	; 0x80
1002413a:	00d2      	lsls	r2, r2, #3
1002413c:	4210      	tst	r0, r2
1002413e:	d143      	bne.n	100241c8 <patch_Telemetry_Sample+0x100>
	int32_t mant_bits=packed_linear_format_number & 0x07ff;
10024140:	0018      	movs	r0, r3
10024142:	9b05      	ldr	r3, [sp, #20]
10024144:	469c      	mov	ip, r3
10024146:	4460      	add	r0, ip
10024148:	1043      	asrs	r3, r0, #1
1002414a:	9305      	str	r3, [sp, #20]
			vin  = (vin  + (uint32_t)(LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_READ_VIN))))>>1u;
1002414c:	2188      	movs	r1, #136	; 0x88
1002414e:	9803      	ldr	r0, [sp, #12]
10024150:	f7dd fa82 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
10024154:	0543      	lsls	r3, r0, #21
10024156:	0d5b      	lsrs	r3, r3, #21
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
10024158:	2280      	movs	r2, #128	; 0x80
1002415a:	00d2      	lsls	r2, r2, #3
1002415c:	4210      	tst	r0, r2
1002415e:	d001      	beq.n	10024164 <patch_Telemetry_Sample+0x9c>
10024160:	482f      	ldr	r0, [pc, #188]	; (10024220 <patch_Telemetry_Sample+0x158>)
10024162:	4303      	orrs	r3, r0
10024164:	4443      	add	r3, r8
10024166:	085b      	lsrs	r3, r3, #1
10024168:	4698      	mov	r8, r3
			iin  = (iin  + (uint32_t)(LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_READ_IIN))))>>1u;
1002416a:	2189      	movs	r1, #137	; 0x89
1002416c:	9803      	ldr	r0, [sp, #12]
1002416e:	f7dd fa73 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
10024172:	0543      	lsls	r3, r0, #21
10024174:	0d5b      	lsrs	r3, r3, #21
10024176:	2280      	movs	r2, #128	; 0x80
10024178:	00d2      	lsls	r2, r2, #3
1002417a:	4210      	tst	r0, r2
1002417c:	d001      	beq.n	10024182 <patch_Telemetry_Sample+0xba>
1002417e:	4a28      	ldr	r2, [pc, #160]	; (10024220 <patch_Telemetry_Sample+0x158>)
10024180:	4313      	orrs	r3, r2
10024182:	19df      	adds	r7, r3, r7
10024184:	087f      	lsrs	r7, r7, #1
			duty = (duty + (uint32_t)(LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_READ_DUTY_CYCLE))))>>1u;
10024186:	2194      	movs	r1, #148	; 0x94
10024188:	9803      	ldr	r0, [sp, #12]
1002418a:	f7dd fa65 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
1002418e:	0543      	lsls	r3, r0, #21
10024190:	0d5b      	lsrs	r3, r3, #21
10024192:	2280      	movs	r2, #128	; 0x80
10024194:	00d2      	lsls	r2, r2, #3
10024196:	4210      	tst	r0, r2
10024198:	d119      	bne.n	100241ce <patch_Telemetry_Sample+0x106>
	int32_t mant_bits=packed_linear_format_number & 0x07ff;
1002419a:	0018      	movs	r0, r3
1002419c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1002419e:	469c      	mov	ip, r3
100241a0:	4460      	add	r0, ip
100241a2:	0843      	lsrs	r3, r0, #1
100241a4:	930a      	str	r3, [sp, #40]	; 0x28
			fsw  = (fsw +  (uint32_t)(LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_READ_FREQUENCY))))>>1u;
100241a6:	2195      	movs	r1, #149	; 0x95
100241a8:	9803      	ldr	r0, [sp, #12]
100241aa:	f7dd fa55 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
100241ae:	0543      	lsls	r3, r0, #21
100241b0:	0d5b      	lsrs	r3, r3, #21
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
100241b2:	2280      	movs	r2, #128	; 0x80
100241b4:	00d2      	lsls	r2, r2, #3
100241b6:	4210      	tst	r0, r2
100241b8:	d10c      	bne.n	100241d4 <patch_Telemetry_Sample+0x10c>
	int32_t mant_bits=packed_linear_format_number & 0x07ff;
100241ba:	0018      	movs	r0, r3
100241bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100241be:	469c      	mov	ip, r3
100241c0:	4460      	add	r0, ip
100241c2:	0843      	lsrs	r3, r0, #1
100241c4:	930b      	str	r3, [sp, #44]	; 0x2c
100241c6:	e114      	b.n	100243f2 <patch_Telemetry_Sample+0x32a>
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
100241c8:	4815      	ldr	r0, [pc, #84]	; (10024220 <patch_Telemetry_Sample+0x158>)
100241ca:	4318      	orrs	r0, r3
100241cc:	e7b9      	b.n	10024142 <patch_Telemetry_Sample+0x7a>
100241ce:	4814      	ldr	r0, [pc, #80]	; (10024220 <patch_Telemetry_Sample+0x158>)
100241d0:	4318      	orrs	r0, r3
100241d2:	e7e3      	b.n	1002419c <patch_Telemetry_Sample+0xd4>
100241d4:	4812      	ldr	r0, [pc, #72]	; (10024220 <patch_Telemetry_Sample+0x158>)
100241d6:	4318      	orrs	r0, r3
100241d8:	e7f0      	b.n	100241bc <patch_Telemetry_Sample+0xf4>
		TELEMETRY_VIN_SOURCE source = Telemetry_get_vin_source((PMBUS_PAGE_t)loop);
		if ((ON_OFF_STATE.On_Off_State[loop]==0)&&
				((source == (TELEMETRY_VIN_SOURCE)TELEMETRY_VIN_SOURCE_VRECT1) || (source == (TELEMETRY_VIN_SOURCE)TELEMETRY_VIN_SOURCE_VRECT2)))
		{
			// if we have vrect sensing and not actively switching we need to set read_vin to 0v
			PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, (uint8_t)PMBUS_CMDCODE_READ_VIN, (uint16_t)(((TWOS_COMPLEMENT (5, vin_read_exp[loop]))<<11)));
100241da:	221f      	movs	r2, #31
100241dc:	9b08      	ldr	r3, [sp, #32]
100241de:	401a      	ands	r2, r3
100241e0:	02d2      	lsls	r2, r2, #11
100241e2:	2188      	movs	r1, #136	; 0x88
100241e4:	9803      	ldr	r0, [sp, #12]
100241e6:	f7dd fb6d 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
100241ea:	e118      	b.n	1002441e <patch_Telemetry_Sample+0x356>
100241ec:	4b0c      	ldr	r3, [pc, #48]	; (10024220 <patch_Telemetry_Sample+0x158>)
100241ee:	4313      	orrs	r3, r2
100241f0:	e173      	b.n	100244da <patch_Telemetry_Sample+0x412>
		exponent = -exponent;
100241f2:	4276      	negs	r6, r6
		value = value >> (exponent);
100241f4:	4133      	asrs	r3, r6
100241f6:	001a      	movs	r2, r3
100241f8:	e177      	b.n	100244ea <patch_Telemetry_Sample+0x422>
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
100241fa:	4b09      	ldr	r3, [pc, #36]	; (10024220 <patch_Telemetry_Sample+0x158>)
100241fc:	4313      	orrs	r3, r2
100241fe:	e18f      	b.n	10024520 <patch_Telemetry_Sample+0x458>
		exponent = -exponent;
10024200:	4276      	negs	r6, r6
		value = value >> (exponent);
10024202:	4133      	asrs	r3, r6
10024204:	001a      	movs	r2, r3
10024206:	e193      	b.n	10024530 <patch_Telemetry_Sample+0x468>
		{
			Set_Firmware_Fault((PMBUS_PAGE_t)loop, FAULT_TYPE_POUT_OP_WARN);
		}
		else
		{
			Clear_Firmware_Fault((PMBUS_PAGE_t)loop, FAULT_TYPE_POUT_OP_WARN);
10024208:	2125      	movs	r1, #37	; 0x25
1002420a:	9803      	ldr	r0, [sp, #12]
1002420c:	f7e3 fe8e 	bl	10007f2c <COMMON_FAULT_HANDLE+0x187>
10024210:	e198      	b.n	10024544 <patch_Telemetry_Sample+0x47c>
10024212:	46c0      	nop			; (mov r8, r8)
10024214:	2005cfa4 	.word	0x2005cfa4
10024218:	200614d0 	.word	0x200614d0
1002421c:	000003ff 	.word	0x000003ff
10024220:	fffff800 	.word	0xfffff800
		{
			Set_Firmware_Fault((PMBUS_PAGE_t)loop, FAULT_TYPE_PIN_OP_WARN);
		}
		else
		{
			Clear_Firmware_Fault((PMBUS_PAGE_t)loop, FAULT_TYPE_PIN_OP_WARN);
10024224:	2124      	movs	r1, #36	; 0x24
10024226:	9803      	ldr	r0, [sp, #12]
10024228:	f7e3 fe80 	bl	10007f2c <COMMON_FAULT_HANDLE+0x187>
1002422c:	3501      	adds	r5, #1
1002422e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10024230:	3304      	adds	r3, #4
10024232:	930c      	str	r3, [sp, #48]	; 0x30
10024234:	2304      	movs	r3, #4
10024236:	469c      	mov	ip, r3
10024238:	44e2      	add	sl, ip
	for(loop=0; loop<(uint8_t)NUM_LOOPS; loop++)  // update for the number of loops in the system
1002423a:	2d02      	cmp	r5, #2
1002423c:	d100      	bne.n	10024240 <patch_Telemetry_Sample+0x178>
1002423e:	e18b      	b.n	10024558 <patch_Telemetry_Sample+0x490>
10024240:	b2eb      	uxtb	r3, r5
10024242:	001e      	movs	r6, r3
10024244:	9303      	str	r3, [sp, #12]
		vout_read_exp[loop] = (int8_t)PMBUS_Get_Vout_Mode_Exponent((PMBUS_PAGE_t)loop);
10024246:	0018      	movs	r0, r3
10024248:	f7dd fa62 	bl	10001710 <PMBUS_Get_On_Off_State+0x7b>
1002424c:	b247      	sxtb	r7, r0
		fsw_read_exp[loop]  = (int8_t)LINEAR11_TO_EXPONENT(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_FREQUENCY_SWITCH));
1002424e:	2133      	movs	r1, #51	; 0x33
10024250:	0030      	movs	r0, r6
10024252:	f7dd fa01 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
	int32_t exp_bits=(packed_linear_format_number >> 11) & 0x1f;
10024256:	0ac0      	lsrs	r0, r0, #11
10024258:	b280      	uxth	r0, r0
	return ((int32_t) (exp_signbit ? (exp_bits | 0xffffffe0) : exp_bits));
1002425a:	2310      	movs	r3, #16
1002425c:	4203      	tst	r3, r0
1002425e:	d002      	beq.n	10024266 <patch_Telemetry_Sample+0x19e>
10024260:	2620      	movs	r6, #32
10024262:	4276      	negs	r6, r6
10024264:	4330      	orrs	r0, r6
10024266:	b243      	sxtb	r3, r0
10024268:	930e      	str	r3, [sp, #56]	; 0x38
		vin_read_exp[loop]  = (int8_t)TWOS_UNCOMPLEMENT(4, Telemetry_Get_PMBUS_Configuration((PMBUS_PAGE_t)loop, (TELEMETRY_CONFIG)TELEMETRY_CONFIG_READ_VIN_EXP));
1002426a:	2158      	movs	r1, #88	; 0x58
1002426c:	9803      	ldr	r0, [sp, #12]
1002426e:	f7e4 ff5d 	bl	1000912c <Telemetry_GetVersion+0x17>
	if ((exp & ((1 << numbits) - 1)) >> (numbits-1))
10024272:	465b      	mov	r3, fp
10024274:	4003      	ands	r3, r0
10024276:	08db      	lsrs	r3, r3, #3
10024278:	d100      	bne.n	1002427c <patch_Telemetry_Sample+0x1b4>
1002427a:	e737      	b.n	100240ec <patch_Telemetry_Sample+0x24>
		return -((int32_t) ((~exp &((1 << numbits) - 1)) + 1));  // not the value, add 1, negate
1002427c:	465b      	mov	r3, fp
1002427e:	4383      	bics	r3, r0
10024280:	43d8      	mvns	r0, r3
10024282:	b243      	sxtb	r3, r0
10024284:	9308      	str	r3, [sp, #32]
		iout_read_exp[loop] = (int8_t)TWOS_UNCOMPLEMENT(4, Telemetry_Get_PMBUS_Configuration((PMBUS_PAGE_t)loop, (TELEMETRY_CONFIG)TELEMETRY_CONFIG_READ_IOUT_EXP));
10024286:	215c      	movs	r1, #92	; 0x5c
10024288:	9803      	ldr	r0, [sp, #12]
1002428a:	f7e4 ff4f 	bl	1000912c <Telemetry_GetVersion+0x17>
	if ((exp & ((1 << numbits) - 1)) >> (numbits-1))
1002428e:	465b      	mov	r3, fp
10024290:	4003      	ands	r3, r0
10024292:	08db      	lsrs	r3, r3, #3
10024294:	d100      	bne.n	10024298 <patch_Telemetry_Sample+0x1d0>
10024296:	e72c      	b.n	100240f2 <patch_Telemetry_Sample+0x2a>
		return -((int32_t) ((~exp &((1 << numbits) - 1)) + 1));  // not the value, add 1, negate
10024298:	465b      	mov	r3, fp
1002429a:	4383      	bics	r3, r0
1002429c:	43d8      	mvns	r0, r3
1002429e:	b243      	sxtb	r3, r0
100242a0:	930d      	str	r3, [sp, #52]	; 0x34
		iin_read_exp[loop]  = (int8_t)TWOS_UNCOMPLEMENT(4, Telemetry_Get_PMBUS_Configuration((PMBUS_PAGE_t)loop, (TELEMETRY_CONFIG)TELEMETRY_CONFIG_READ_IIN_EXP));
100242a2:	2160      	movs	r1, #96	; 0x60
100242a4:	9803      	ldr	r0, [sp, #12]
100242a6:	f7e4 ff41 	bl	1000912c <Telemetry_GetVersion+0x17>
	if ((exp & ((1 << numbits) - 1)) >> (numbits-1))
100242aa:	465b      	mov	r3, fp
100242ac:	4003      	ands	r3, r0
100242ae:	08db      	lsrs	r3, r3, #3
100242b0:	d100      	bne.n	100242b4 <patch_Telemetry_Sample+0x1ec>
100242b2:	e721      	b.n	100240f8 <patch_Telemetry_Sample+0x30>
		return -((int32_t) ((~exp &((1 << numbits) - 1)) + 1));  // not the value, add 1, negate
100242b4:	465b      	mov	r3, fp
100242b6:	4383      	bics	r3, r0
100242b8:	43d8      	mvns	r0, r3
100242ba:	b243      	sxtb	r3, r0
100242bc:	9309      	str	r3, [sp, #36]	; 0x24
		duty_read_exp[loop] = (int8_t)TWOS_UNCOMPLEMENT(4, Telemetry_Get_PMBUS_Configuration((PMBUS_PAGE_t)loop, (TELEMETRY_CONFIG)TELEMETRY_CONFIG_READ_DUTY_EXP));
100242be:	2164      	movs	r1, #100	; 0x64
100242c0:	9803      	ldr	r0, [sp, #12]
100242c2:	f7e4 ff33 	bl	1000912c <Telemetry_GetVersion+0x17>
	if ((exp & ((1 << numbits) - 1)) >> (numbits-1))
100242c6:	465b      	mov	r3, fp
100242c8:	4003      	ands	r3, r0
100242ca:	08db      	lsrs	r3, r3, #3
100242cc:	d100      	bne.n	100242d0 <patch_Telemetry_Sample+0x208>
100242ce:	e716      	b.n	100240fe <patch_Telemetry_Sample+0x36>
		return -((int32_t) ((~exp &((1 << numbits) - 1)) + 1));  // not the value, add 1, negate
100242d0:	465b      	mov	r3, fp
100242d2:	4383      	bics	r3, r0
100242d4:	43d8      	mvns	r0, r3
100242d6:	b243      	sxtb	r3, r0
100242d8:	930f      	str	r3, [sp, #60]	; 0x3c
		power_read_exp[loop]= (int8_t)TWOS_UNCOMPLEMENT(3, Telemetry_Get_PMBUS_Configuration((PMBUS_PAGE_t)loop, (TELEMETRY_CONFIG)TELEMETRY_CONFIG_READ_POWER_EXP));
100242da:	2100      	movs	r1, #0
100242dc:	9803      	ldr	r0, [sp, #12]
100242de:	f7e4 ff25 	bl	1000912c <Telemetry_GetVersion+0x17>
	if ((exp & ((1 << numbits) - 1)) >> (numbits-1))
100242e2:	2307      	movs	r3, #7
100242e4:	4003      	ands	r3, r0
100242e6:	089b      	lsrs	r3, r3, #2
100242e8:	d100      	bne.n	100242ec <patch_Telemetry_Sample+0x224>
100242ea:	e70b      	b.n	10024104 <patch_Telemetry_Sample+0x3c>
		return -((int32_t) ((~exp &((1 << numbits) - 1)) + 1));  // not the value, add 1, negate
100242ec:	2307      	movs	r3, #7
100242ee:	4383      	bics	r3, r0
100242f0:	43d8      	mvns	r0, r3
100242f2:	b243      	sxtb	r3, r0
100242f4:	4699      	mov	r9, r3
		fan_read_exp[loop]  = (int8_t)TWOS_UNCOMPLEMENT(4, Telemetry_Get_PMBUS_Configuration((PMBUS_PAGE_t)PMBUS_PAGE_0, (TELEMETRY_CONFIG)TELEMETRY_CONFIG_READ_FAN_EXP));
100242f6:	2168      	movs	r1, #104	; 0x68
100242f8:	2000      	movs	r0, #0
100242fa:	f7e4 ff17 	bl	1000912c <Telemetry_GetVersion+0x17>
	if ((exp & ((1 << numbits) - 1)) >> (numbits-1))
100242fe:	465b      	mov	r3, fp
10024300:	4003      	ands	r3, r0
10024302:	08db      	lsrs	r3, r3, #3
10024304:	d100      	bne.n	10024308 <patch_Telemetry_Sample+0x240>
10024306:	e700      	b.n	1002410a <patch_Telemetry_Sample+0x42>
		return -((int32_t) ((~exp &((1 << numbits) - 1)) + 1));  // not the value, add 1, negate
10024308:	465b      	mov	r3, fp
1002430a:	4383      	bics	r3, r0
1002430c:	43d8      	mvns	r0, r3
1002430e:	ab11      	add	r3, sp, #68	; 0x44
10024310:	54e8      	strb	r0, [r5, r3]
		vout = (uint32_t)Telemetry_get((PMBUS_PAGE_t)loop, VOUT_TELEM);
10024312:	2100      	movs	r1, #0
10024314:	9803      	ldr	r0, [sp, #12]
10024316:	f7e5 fe0f 	bl	10009f38 <Telemetry_drv_init+0x47>
		vout = (uint32_t)SHIFT_EXPONENT((int32_t)vout,  PMBUS_Q_EXP - vout_read_exp[loop]);  // convert to vout_mode format
1002431a:	2310      	movs	r3, #16
1002431c:	425b      	negs	r3, r3
1002431e:	1bdb      	subs	r3, r3, r7
		value = value << (exponent);
10024320:	0002      	movs	r2, r0
10024322:	409a      	lsls	r2, r3
	if ( exponent <= 0)
10024324:	2b00      	cmp	r3, #0
10024326:	dc00      	bgt.n	1002432a <patch_Telemetry_Sample+0x262>
10024328:	e6f2      	b.n	10024110 <patch_Telemetry_Sample+0x48>
1002432a:	9204      	str	r2, [sp, #16]
1002432c:	4bd5      	ldr	r3, [pc, #852]	; (10024684 <patch_Telemetry_Sample+0x5bc>)
1002432e:	429a      	cmp	r2, r3
10024330:	d900      	bls.n	10024334 <patch_Telemetry_Sample+0x26c>
10024332:	9304      	str	r3, [sp, #16]
10024334:	4656      	mov	r6, sl
		TELEM_DATA.vout[loop] = vout;
10024336:	9a04      	ldr	r2, [sp, #16]
10024338:	6032      	str	r2, [r6, #0]
		iout = Telemetry_get((PMBUS_PAGE_t)loop, IOUT_TELEM);
1002433a:	2101      	movs	r1, #1
1002433c:	9803      	ldr	r0, [sp, #12]
1002433e:	f7e5 fdfb 	bl	10009f38 <Telemetry_drv_init+0x47>
10024342:	42a0      	cmp	r0, r4
10024344:	dd00      	ble.n	10024348 <patch_Telemetry_Sample+0x280>
10024346:	0020      	movs	r0, r4
10024348:	9005      	str	r0, [sp, #20]
1002434a:	4bcf      	ldr	r3, [pc, #828]	; (10024688 <patch_Telemetry_Sample+0x5c0>)
1002434c:	4298      	cmp	r0, r3
1002434e:	da00      	bge.n	10024352 <patch_Telemetry_Sample+0x28a>
10024350:	9305      	str	r3, [sp, #20]
		TELEM_DATA.iout[loop] = iout;
10024352:	9b05      	ldr	r3, [sp, #20]
10024354:	60b3      	str	r3, [r6, #8]
		vin = (uint32_t)Telemetry_get((PMBUS_PAGE_t)loop, VIN_TELEM);
10024356:	2102      	movs	r1, #2
10024358:	9803      	ldr	r0, [sp, #12]
1002435a:	f7e5 fded 	bl	10009f38 <Telemetry_drv_init+0x47>
1002435e:	4680      	mov	r8, r0
10024360:	42a0      	cmp	r0, r4
10024362:	d900      	bls.n	10024366 <patch_Telemetry_Sample+0x29e>
10024364:	46a0      	mov	r8, r4
		TELEM_DATA.vin[loop] = vin;
10024366:	4643      	mov	r3, r8
10024368:	61b3      	str	r3, [r6, #24]
		duty = (uint32_t)Telemetry_get((PMBUS_PAGE_t)loop, DUTY_TELEM);
1002436a:	2107      	movs	r1, #7
1002436c:	9803      	ldr	r0, [sp, #12]
1002436e:	f7e5 fde3 	bl	10009f38 <Telemetry_drv_init+0x47>
10024372:	900a      	str	r0, [sp, #40]	; 0x28
10024374:	42a0      	cmp	r0, r4
10024376:	d900      	bls.n	1002437a <patch_Telemetry_Sample+0x2b2>
10024378:	940a      	str	r4, [sp, #40]	; 0x28
		TELEM_DATA.duty[loop] = duty;
1002437a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1002437c:	63b3      	str	r3, [r6, #56]	; 0x38
		fsw = (uint32_t)Telemetry_get((PMBUS_PAGE_t)loop, FSW_TELEM);
1002437e:	2108      	movs	r1, #8
10024380:	9803      	ldr	r0, [sp, #12]
10024382:	f7e5 fdd9 	bl	10009f38 <Telemetry_drv_init+0x47>
10024386:	900b      	str	r0, [sp, #44]	; 0x2c
10024388:	42a0      	cmp	r0, r4
1002438a:	d900      	bls.n	1002438e <patch_Telemetry_Sample+0x2c6>
1002438c:	940b      	str	r4, [sp, #44]	; 0x2c
		TELEM_DATA.fsw[loop] = fsw;
1002438e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10024390:	6333      	str	r3, [r6, #48]	; 0x30
		pout = (uint32_t)Telemetry_get_power(vout, vout_read_exp[loop], iout, iout_read_exp[loop], power_read_exp[loop]); //in read_power_exp
10024392:	464b      	mov	r3, r9
10024394:	9300      	str	r3, [sp, #0]
10024396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10024398:	9a05      	ldr	r2, [sp, #20]
1002439a:	0039      	movs	r1, r7
1002439c:	9804      	ldr	r0, [sp, #16]
1002439e:	f7e5 ff23 	bl	1000a1e8 <Telemetry_get_fan_speed+0x1f>
100243a2:	9007      	str	r0, [sp, #28]
100243a4:	42a0      	cmp	r0, r4
100243a6:	d900      	bls.n	100243aa <patch_Telemetry_Sample+0x2e2>
100243a8:	9407      	str	r4, [sp, #28]
		TELEM_DATA.pout[loop] = pout;
100243aa:	9f07      	ldr	r7, [sp, #28]
100243ac:	6237      	str	r7, [r6, #32]
		iin = (uint32_t)Telemetry_get((PMBUS_PAGE_t)loop, IIN_TELEM);
100243ae:	2103      	movs	r1, #3
100243b0:	9803      	ldr	r0, [sp, #12]
100243b2:	f7e5 fdc1 	bl	10009f38 <Telemetry_drv_init+0x47>
		iin = (uint32_t)input_current_correction(vin_read_exp[loop], iin_read_exp[loop], power_read_exp[loop], vin, pout);	// correction of Input Current
100243b6:	9700      	str	r7, [sp, #0]
100243b8:	4643      	mov	r3, r8
100243ba:	464a      	mov	r2, r9
100243bc:	9909      	ldr	r1, [sp, #36]	; 0x24
100243be:	9808      	ldr	r0, [sp, #32]
100243c0:	f7ff fe5c 	bl	1002407c <input_current_correction>
100243c4:	0007      	movs	r7, r0
		TELEM_DATA.iin[loop] = iin;
100243c6:	6130      	str	r0, [r6, #16]
		pin = (uint32_t)Telemetry_get_power(vin, vin_read_exp[loop], (int32_t)iin, iin_read_exp[loop], power_read_exp[loop]);
100243c8:	464a      	mov	r2, r9
100243ca:	9200      	str	r2, [sp, #0]
100243cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
100243ce:	0002      	movs	r2, r0
100243d0:	9908      	ldr	r1, [sp, #32]
100243d2:	4640      	mov	r0, r8
100243d4:	f7e5 ff08 	bl	1000a1e8 <Telemetry_get_fan_speed+0x1f>
100243d8:	9006      	str	r0, [sp, #24]
100243da:	42a0      	cmp	r0, r4
100243dc:	d900      	bls.n	100243e0 <patch_Telemetry_Sample+0x318>
100243de:	9406      	str	r4, [sp, #24]
		TELEM_DATA.pin[loop] = pin;
100243e0:	9b06      	ldr	r3, [sp, #24]
100243e2:	62b3      	str	r3, [r6, #40]	; 0x28
		if (Telemetry_Get_PMBUS_Configuration((PMBUS_PAGE_t)loop, (TELEMETRY_CONFIG)TELEMETRY_CONFIG_FW_FILTER_EN) == 1) {
100243e4:	2103      	movs	r1, #3
100243e6:	9803      	ldr	r0, [sp, #12]
100243e8:	f7e4 fea0 	bl	1000912c <Telemetry_GetVersion+0x17>
100243ec:	2801      	cmp	r0, #1
100243ee:	d100      	bne.n	100243f2 <patch_Telemetry_Sample+0x32a>
100243f0:	e692      	b.n	10024118 <patch_Telemetry_Sample+0x50>
		TELEMETRY_VIN_SOURCE source = Telemetry_get_vin_source((PMBUS_PAGE_t)loop);
100243f2:	9803      	ldr	r0, [sp, #12]
100243f4:	f7e5 ff3e 	bl	1000a274 <Telemetry_get_tempi+0x5b>
		if ((ON_OFF_STATE.On_Off_State[loop]==0)&&
100243f8:	4ba4      	ldr	r3, [pc, #656]	; (1002468c <patch_Telemetry_Sample+0x5c4>)
100243fa:	5d5b      	ldrb	r3, [r3, r5]
100243fc:	2b00      	cmp	r3, #0
100243fe:	d102      	bne.n	10024406 <patch_Telemetry_Sample+0x33e>
10024400:	2801      	cmp	r0, #1
10024402:	d800      	bhi.n	10024406 <patch_Telemetry_Sample+0x33e>
10024404:	e6e9      	b.n	100241da <patch_Telemetry_Sample+0x112>
			PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, (uint8_t)PMBUS_CMDCODE_READ_VIN, (uint16_t)(((TWOS_COMPLEMENT (5, vin_read_exp[loop]))<<11) | (vin & 0x7ff))); // read_vin is u7.2
10024406:	221f      	movs	r2, #31
10024408:	9b08      	ldr	r3, [sp, #32]
1002440a:	401a      	ands	r2, r3
1002440c:	02d2      	lsls	r2, r2, #11
1002440e:	4643      	mov	r3, r8
10024410:	055e      	lsls	r6, r3, #21
10024412:	0d76      	lsrs	r6, r6, #21
10024414:	4332      	orrs	r2, r6
10024416:	2188      	movs	r1, #136	; 0x88
10024418:	9803      	ldr	r0, [sp, #12]
1002441a:	f7dd fa53 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
		PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, (uint8_t)PMBUS_CMDCODE_READ_VOUT,      (uint16_t)vout);
1002441e:	466b      	mov	r3, sp
10024420:	8a1a      	ldrh	r2, [r3, #16]
10024422:	218b      	movs	r1, #139	; 0x8b
10024424:	9803      	ldr	r0, [sp, #12]
10024426:	f7dd fa4d 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
	return ((uint8_t)exp & ((1 << numbits)-1));
1002442a:	261f      	movs	r6, #31
		PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, (uint8_t)PMBUS_CMDCODE_READ_IOUT,      (uint16_t)( (TWOS_COMPLEMENT (5, iout_read_exp[loop] )<<11) | ((uint16_t)iout & 0x7ff))); // read_iout is s7.2
1002442c:	980d      	ldr	r0, [sp, #52]	; 0x34
1002442e:	4030      	ands	r0, r6
10024430:	02c0      	lsls	r0, r0, #11
10024432:	9b05      	ldr	r3, [sp, #20]
10024434:	055a      	lsls	r2, r3, #21
10024436:	0d52      	lsrs	r2, r2, #21
10024438:	4302      	orrs	r2, r0
1002443a:	218c      	movs	r1, #140	; 0x8c
1002443c:	9803      	ldr	r0, [sp, #12]
1002443e:	f7dd fa41 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
		PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, (uint8_t)PMBUS_CMDCODE_READ_IIN,       (uint16_t)( (TWOS_COMPLEMENT (5, iin_read_exp[loop]  )<<11) | (iin  & 0x7ff))); // read_iin is u6.4
10024442:	9a09      	ldr	r2, [sp, #36]	; 0x24
10024444:	4032      	ands	r2, r6
10024446:	02d2      	lsls	r2, r2, #11
10024448:	057f      	lsls	r7, r7, #21
1002444a:	0d7f      	lsrs	r7, r7, #21
1002444c:	433a      	orrs	r2, r7
1002444e:	2189      	movs	r1, #137	; 0x89
10024450:	9803      	ldr	r0, [sp, #12]
10024452:	f7dd fa37 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
		PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, (uint8_t)PMBUS_CMDCODE_READ_POUT,      (uint16_t)( (TWOS_COMPLEMENT (5, power_read_exp[loop])<<11) | (pout & 0x7ff))); // fixed at u10.0 format
10024456:	464f      	mov	r7, r9
10024458:	4037      	ands	r7, r6
1002445a:	02ff      	lsls	r7, r7, #11
1002445c:	9b07      	ldr	r3, [sp, #28]
1002445e:	055a      	lsls	r2, r3, #21
10024460:	0d52      	lsrs	r2, r2, #21
10024462:	433a      	orrs	r2, r7
10024464:	2196      	movs	r1, #150	; 0x96
10024466:	9803      	ldr	r0, [sp, #12]
10024468:	f7dd fa2c 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
		PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, (uint8_t)PMBUS_CMDCODE_READ_PIN,       (uint16_t)( (TWOS_COMPLEMENT (5, power_read_exp[loop])<<11) | (pin  & 0x7ff)));
1002446c:	9b06      	ldr	r3, [sp, #24]
1002446e:	055a      	lsls	r2, r3, #21
10024470:	0d52      	lsrs	r2, r2, #21
10024472:	433a      	orrs	r2, r7
10024474:	2197      	movs	r1, #151	; 0x97
10024476:	9f03      	ldr	r7, [sp, #12]
10024478:	0038      	movs	r0, r7
1002447a:	f7dd fa23 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
		PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, (uint8_t)PMBUS_CMDCODE_READ_DUTY_CYCLE,(uint16_t)( (TWOS_COMPLEMENT (5, duty_read_exp[loop] )<<11) | (duty & 0x7ff)));  // u7.3 %
1002447e:	980f      	ldr	r0, [sp, #60]	; 0x3c
10024480:	4030      	ands	r0, r6
10024482:	02c0      	lsls	r0, r0, #11
10024484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10024486:	055a      	lsls	r2, r3, #21
10024488:	0d52      	lsrs	r2, r2, #21
1002448a:	4302      	orrs	r2, r0
1002448c:	2194      	movs	r1, #148	; 0x94
1002448e:	0038      	movs	r0, r7
10024490:	f7dd fa18 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
		PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, (uint8_t)PMBUS_CMDCODE_READ_FREQUENCY, (uint16_t)( (TWOS_COMPLEMENT (5, fsw_read_exp[loop]  )<<11) | (fsw  & 0x7ff)));  // Return READ_FREQUENCY in FREQUENCY_SWITCH format
10024494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10024496:	4032      	ands	r2, r6
10024498:	02d2      	lsls	r2, r2, #11
1002449a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1002449c:	055e      	lsls	r6, r3, #21
1002449e:	0d76      	lsrs	r6, r6, #21
100244a0:	4332      	orrs	r2, r6
100244a2:	2195      	movs	r1, #149	; 0x95
100244a4:	0038      	movs	r0, r7
100244a6:	f7dd fa0d 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
			int32_t exponent = LINEAR11_TO_EXPONENT(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_POUT_OP_WARN_LIMIT));
100244aa:	216a      	movs	r1, #106	; 0x6a
100244ac:	0038      	movs	r0, r7
100244ae:	f7dd f8d3 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
	int32_t exp_bits=(packed_linear_format_number >> 11) & 0x1f;
100244b2:	0ac0      	lsrs	r0, r0, #11
100244b4:	b286      	uxth	r6, r0
	return ((int32_t) (exp_signbit ? (exp_bits | 0xffffffe0) : exp_bits));
100244b6:	2310      	movs	r3, #16
100244b8:	4233      	tst	r3, r6
100244ba:	d002      	beq.n	100244c2 <patch_Telemetry_Sample+0x3fa>
100244bc:	2020      	movs	r0, #32
100244be:	4240      	negs	r0, r0
100244c0:	4306      	orrs	r6, r0
			int16_t mantissa = (int16_t)LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_POUT_OP_WARN_LIMIT));
100244c2:	216a      	movs	r1, #106	; 0x6a
100244c4:	9803      	ldr	r0, [sp, #12]
100244c6:	f7dd f8c7 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
100244ca:	0542      	lsls	r2, r0, #21
100244cc:	0d52      	lsrs	r2, r2, #21
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
100244ce:	2380      	movs	r3, #128	; 0x80
100244d0:	00db      	lsls	r3, r3, #3
100244d2:	4218      	tst	r0, r3
100244d4:	d000      	beq.n	100244d8 <patch_Telemetry_Sample+0x410>
100244d6:	e689      	b.n	100241ec <patch_Telemetry_Sample+0x124>
	int32_t mant_bits=packed_linear_format_number & 0x07ff;
100244d8:	0013      	movs	r3, r2
			POWER_WARN_THRESH[loop].pout_op_warn_thresh = (uint16_t) SHIFT_EXPONENT(mantissa, (- power_read_exp[loop] + exponent));
100244da:	b21b      	sxth	r3, r3
100244dc:	464a      	mov	r2, r9
100244de:	1ab6      	subs	r6, r6, r2
		value = value << (exponent);
100244e0:	001a      	movs	r2, r3
100244e2:	40b2      	lsls	r2, r6
	if ( exponent <= 0)
100244e4:	2e00      	cmp	r6, #0
100244e6:	dc00      	bgt.n	100244ea <patch_Telemetry_Sample+0x422>
100244e8:	e683      	b.n	100241f2 <patch_Telemetry_Sample+0x12a>
100244ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100244ec:	001f      	movs	r7, r3
100244ee:	801a      	strh	r2, [r3, #0]
			exponent = LINEAR11_TO_EXPONENT(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_PIN_OP_WARN_LIMIT));
100244f0:	216b      	movs	r1, #107	; 0x6b
100244f2:	9803      	ldr	r0, [sp, #12]
100244f4:	f7dd f8b0 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
	int32_t exp_bits=(packed_linear_format_number >> 11) & 0x1f;
100244f8:	0ac0      	lsrs	r0, r0, #11
100244fa:	b286      	uxth	r6, r0
	return ((int32_t) (exp_signbit ? (exp_bits | 0xffffffe0) : exp_bits));
100244fc:	2310      	movs	r3, #16
100244fe:	4233      	tst	r3, r6
10024500:	d002      	beq.n	10024508 <patch_Telemetry_Sample+0x440>
10024502:	2020      	movs	r0, #32
10024504:	4240      	negs	r0, r0
10024506:	4306      	orrs	r6, r0
			mantissa = (int16_t)LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_PIN_OP_WARN_LIMIT));
10024508:	216b      	movs	r1, #107	; 0x6b
1002450a:	9803      	ldr	r0, [sp, #12]
1002450c:	f7dd f8a4 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
10024510:	0542      	lsls	r2, r0, #21
10024512:	0d52      	lsrs	r2, r2, #21
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
10024514:	2380      	movs	r3, #128	; 0x80
10024516:	00db      	lsls	r3, r3, #3
10024518:	4218      	tst	r0, r3
1002451a:	d000      	beq.n	1002451e <patch_Telemetry_Sample+0x456>
1002451c:	e66d      	b.n	100241fa <patch_Telemetry_Sample+0x132>
	int32_t mant_bits=packed_linear_format_number & 0x07ff;
1002451e:	0013      	movs	r3, r2
			POWER_WARN_THRESH[loop].pin_op_warn_thresh = (uint16_t) SHIFT_EXPONENT(mantissa, (- power_read_exp[loop] + exponent));
10024520:	b21b      	sxth	r3, r3
10024522:	464a      	mov	r2, r9
10024524:	1ab6      	subs	r6, r6, r2
		value = value << (exponent);
10024526:	001a      	movs	r2, r3
10024528:	40b2      	lsls	r2, r6
	if ( exponent <= 0)
1002452a:	2e00      	cmp	r6, #0
1002452c:	dc00      	bgt.n	10024530 <patch_Telemetry_Sample+0x468>
1002452e:	e667      	b.n	10024200 <patch_Telemetry_Sample+0x138>
10024530:	807a      	strh	r2, [r7, #2]
		if (pout>POWER_WARN_THRESH[loop].pout_op_warn_thresh)
10024532:	883b      	ldrh	r3, [r7, #0]
10024534:	9a07      	ldr	r2, [sp, #28]
10024536:	4293      	cmp	r3, r2
10024538:	d300      	bcc.n	1002453c <patch_Telemetry_Sample+0x474>
1002453a:	e665      	b.n	10024208 <patch_Telemetry_Sample+0x140>
			Set_Firmware_Fault((PMBUS_PAGE_t)loop, FAULT_TYPE_POUT_OP_WARN);
1002453c:	2125      	movs	r1, #37	; 0x25
1002453e:	9803      	ldr	r0, [sp, #12]
10024540:	f7e4 fc90 	bl	10008e64 <LOOP_FAULT_HANDLE+0x3db>
		if (pin>POWER_WARN_THRESH[loop].pin_op_warn_thresh)
10024544:	887b      	ldrh	r3, [r7, #2]
10024546:	9a06      	ldr	r2, [sp, #24]
10024548:	4293      	cmp	r3, r2
1002454a:	d300      	bcc.n	1002454e <patch_Telemetry_Sample+0x486>
1002454c:	e66a      	b.n	10024224 <patch_Telemetry_Sample+0x15c>
			Set_Firmware_Fault((PMBUS_PAGE_t)loop, FAULT_TYPE_PIN_OP_WARN);
1002454e:	2124      	movs	r1, #36	; 0x24
10024550:	9803      	ldr	r0, [sp, #12]
10024552:	f7e4 fc87 	bl	10008e64 <LOOP_FAULT_HANDLE+0x3db>
10024556:	e669      	b.n	1002422c <patch_Telemetry_Sample+0x164>
		}

	}

  //ATSEN_TELEM
	tempa = Telemetry_get(PMBUS_PAGE_0, ATSEN_TELEM);
10024558:	2104      	movs	r1, #4
1002455a:	2000      	movs	r0, #0
1002455c:	f7e5 fcec 	bl	10009f38 <Telemetry_drv_init+0x47>
10024560:	9003      	str	r0, [sp, #12]
	TELEM_DATA.temperature[0] = tempa;
10024562:	4c4b      	ldr	r4, [pc, #300]	; (10024690 <patch_Telemetry_Sample+0x5c8>)
10024564:	6620      	str	r0, [r4, #96]	; 0x60
  //BTSEN_TELEM
	tempb = Telemetry_get(PMBUS_PAGE_0, BTSEN_TELEM);
10024566:	2105      	movs	r1, #5
10024568:	2000      	movs	r0, #0
1002456a:	f7e5 fce5 	bl	10009f38 <Telemetry_drv_init+0x47>
1002456e:	0005      	movs	r5, r0
	TELEM_DATA.temperature[1] = tempb;
10024570:	6660      	str	r0, [r4, #100]	; 0x64
  //ITSEN_TELEM
	tempi = Telemetry_get_tempi();
10024572:	f7e5 fe51 	bl	1000a218 <Telemetry_get_power+0x2f>
10024576:	9005      	str	r0, [sp, #20]
	TELEM_DATA.temperature[2] = tempi;
10024578:	66a0      	str	r0, [r4, #104]	; 0x68
	//tempa = Telemetry_get((PMBUS_PAGE_t)loop, ITSEN_TELEM);

	// Here we determine which READ_TEMPERATURE gets tempA, tempB, and tempI
	for(loop=0; loop<NUM_LOOPS; loop++)
1002457a:	2400      	movs	r4, #0
	{
		switch ((PMBUS_Get_Command_Byte ((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_MFR_SELECT_TEMPERATURE_SENSOR)) & 0x7 )
1002457c:	2707      	movs	r7, #7
		{
			case 0:
				temp_1 = tempa;
				temp_2 = tempb;
1002457e:	9504      	str	r5, [sp, #16]
10024580:	e026      	b.n	100245d0 <patch_Telemetry_Sample+0x508>
				break;
			case 1:
				temp_1 = tempa;
				temp_2 = tempi;
10024582:	9d05      	ldr	r5, [sp, #20]
				temp_1 = tempa;
10024584:	9e03      	ldr	r6, [sp, #12]
10024586:	e00d      	b.n	100245a4 <patch_Telemetry_Sample+0x4dc>
				break;
			case 2:
				temp_1 = tempb;
				temp_2 = tempa;
10024588:	9d03      	ldr	r5, [sp, #12]
				temp_1 = tempb;
1002458a:	9e04      	ldr	r6, [sp, #16]
				break;
1002458c:	e00a      	b.n	100245a4 <patch_Telemetry_Sample+0x4dc>
			case 3:
				temp_1 = tempb;
				temp_2 = tempi;
1002458e:	9d05      	ldr	r5, [sp, #20]
				temp_1 = tempb;
10024590:	9e04      	ldr	r6, [sp, #16]
				break;
10024592:	e007      	b.n	100245a4 <patch_Telemetry_Sample+0x4dc>
			case 4:
				temp_1 = tempi;
				temp_2 = tempa;
10024594:	9d03      	ldr	r5, [sp, #12]
				temp_1 = tempi;
10024596:	9e05      	ldr	r6, [sp, #20]
				break;
10024598:	e004      	b.n	100245a4 <patch_Telemetry_Sample+0x4dc>
			case 5:
				temp_1 = tempi;
				temp_2 = tempb;
1002459a:	9d04      	ldr	r5, [sp, #16]
				temp_1 = tempi;
1002459c:	9e05      	ldr	r6, [sp, #20]
				break;
1002459e:	e001      	b.n	100245a4 <patch_Telemetry_Sample+0x4dc>
				temp_2 = tempb;
100245a0:	9d04      	ldr	r5, [sp, #16]
				temp_1 = tempa;
100245a2:	9e03      	ldr	r6, [sp, #12]
				temp_1 = tempa;
				temp_2 = tempb;
				break;
		}

		if (Telemetry_Get_PMBUS_Configuration((PMBUS_PAGE_t)loop, (TELEMETRY_CONFIG)TELEMETRY_CONFIG_FW_FILTER_EN) == 1) {
100245a4:	2103      	movs	r1, #3
100245a6:	0020      	movs	r0, r4
100245a8:	f7e4 fdc0 	bl	1000912c <Telemetry_GetVersion+0x17>
100245ac:	2801      	cmp	r0, #1
100245ae:	d01b      	beq.n	100245e8 <patch_Telemetry_Sample+0x520>
			temp_1 = (temp_1 + (LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_READ_TEMPERATURE_1))))>>1u;
			/*lint -e702 */
			temp_2 = (temp_2 + (LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_READ_TEMPERATURE_2))))>>1u;
		}

		PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, PMBUS_CMDCODE_READ_TEMPERATURE_1, ((uint16_t)temp_1 & 0x7ff));
100245b0:	0572      	lsls	r2, r6, #21
100245b2:	0d52      	lsrs	r2, r2, #21
100245b4:	218d      	movs	r1, #141	; 0x8d
100245b6:	0020      	movs	r0, r4
100245b8:	f7dd f984 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
		PMBUS_Set_Command_Word((PMBUS_PAGE_W_BROADCAST_t)loop, PMBUS_CMDCODE_READ_TEMPERATURE_2, ((uint16_t)temp_2 & 0x7ff));
100245bc:	056a      	lsls	r2, r5, #21
100245be:	0d52      	lsrs	r2, r2, #21
100245c0:	218e      	movs	r1, #142	; 0x8e
100245c2:	0020      	movs	r0, r4
100245c4:	f7dd f97e 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
	for(loop=0; loop<NUM_LOOPS; loop++)
100245c8:	3401      	adds	r4, #1
100245ca:	b2e4      	uxtb	r4, r4
100245cc:	2c02      	cmp	r4, #2
100245ce:	d024      	beq.n	1002461a <patch_Telemetry_Sample+0x552>
		switch ((PMBUS_Get_Command_Byte ((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_MFR_SELECT_TEMPERATURE_SENSOR)) & 0x7 )
100245d0:	21dc      	movs	r1, #220	; 0xdc
100245d2:	0020      	movs	r0, r4
100245d4:	f7dd f804 	bl	100015e0 <PMBUS_Copy_To_RAM+0x9f>
100245d8:	4038      	ands	r0, r7
100245da:	b2c3      	uxtb	r3, r0
100245dc:	2b05      	cmp	r3, #5
100245de:	d8df      	bhi.n	100245a0 <patch_Telemetry_Sample+0x4d8>
100245e0:	0080      	lsls	r0, r0, #2
100245e2:	4b2c      	ldr	r3, [pc, #176]	; (10024694 <patch_Telemetry_Sample+0x5cc>)
100245e4:	581b      	ldr	r3, [r3, r0]
100245e6:	469f      	mov	pc, r3
			temp_1 = (temp_1 + (LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_READ_TEMPERATURE_1))))>>1u;
100245e8:	218d      	movs	r1, #141	; 0x8d
100245ea:	0020      	movs	r0, r4
100245ec:	f7dd f834 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
100245f0:	0543      	lsls	r3, r0, #21
100245f2:	0d5b      	lsrs	r3, r3, #21
	return ((int32_t) (mant_signbit ? (mant_bits | 0xfffff800) : mant_bits));
100245f4:	0542      	lsls	r2, r0, #21
100245f6:	d501      	bpl.n	100245fc <patch_Telemetry_Sample+0x534>
100245f8:	4a27      	ldr	r2, [pc, #156]	; (10024698 <patch_Telemetry_Sample+0x5d0>)
100245fa:	4313      	orrs	r3, r2
100245fc:	18f6      	adds	r6, r6, r3
100245fe:	1076      	asrs	r6, r6, #1
			temp_2 = (temp_2 + (LINEAR11_TO_MANTISSA(PMBUS_Get_Command_Word((PMBUS_PAGE_t)loop, PMBUS_CMDCODE_READ_TEMPERATURE_2))))>>1u;
10024600:	218e      	movs	r1, #142	; 0x8e
10024602:	0020      	movs	r0, r4
10024604:	f7dd f828 	bl	10001658 <PMBUS_Get_Command_Dword+0x3f>
10024608:	0543      	lsls	r3, r0, #21
1002460a:	0d5b      	lsrs	r3, r3, #21
1002460c:	0542      	lsls	r2, r0, #21
1002460e:	d501      	bpl.n	10024614 <patch_Telemetry_Sample+0x54c>
10024610:	4a21      	ldr	r2, [pc, #132]	; (10024698 <patch_Telemetry_Sample+0x5d0>)
10024612:	4313      	orrs	r3, r2
10024614:	18ed      	adds	r5, r5, r3
10024616:	106d      	asrs	r5, r5, #1
10024618:	e7ca      	b.n	100245b0 <patch_Telemetry_Sample+0x4e8>
	}

	uint16_t fan_speed1 = Telemetry_get_fan_speed(FAN1);
1002461a:	2000      	movs	r0, #0
1002461c:	f7e5 fdd4 	bl	1000a1c8 <Telemetry_get_adc_code+0x3f>
10024620:	4680      	mov	r8, r0
	uint16_t fan_speed2 = Telemetry_get_fan_speed(FAN2);
10024622:	2001      	movs	r0, #1
10024624:	f7e5 fdd0 	bl	1000a1c8 <Telemetry_get_adc_code+0x3f>
10024628:	0006      	movs	r6, r0

	// Get fan speed, replicate on both loops
	// since the bottom 8 lsb's of fan_speed register are always zero we shift those off and use +6 exponent to get 64 to 65k rpm
	int32_t temp = SHIFT_EXPONENT(fan_speed1, -(fan_read_exp[PMBUS_PAGE_0]));
1002462a:	ab11      	add	r3, sp, #68	; 0x44
1002462c:	2500      	movs	r5, #0
1002462e:	575d      	ldrsb	r5, [r3, r5]
10024630:	426f      	negs	r7, r5
	if ( exponent <= 0)
10024632:	2f00      	cmp	r7, #0
10024634:	dd34      	ble.n	100246a0 <patch_Telemetry_Sample+0x5d8>
	if (temp > 0x3ff) temp = 0x3ff;  // clamp fan speed at mantissa size
	PMBUS_Set_Command_Word(PMBUS_PAGE_WB_BROADCAST, (uint8_t)PMBUS_CMDCODE_READ_FAN_SPEED_1, (uint16_t)(((TWOS_COMPLEMENT (5, fan_read_exp[PMBUS_PAGE_0]))<<11)
10024636:	241f      	movs	r4, #31
10024638:	402c      	ands	r4, r5
1002463a:	02e4      	lsls	r4, r4, #11
			| temp));
1002463c:	b224      	sxth	r4, r4
		value = value << (exponent);
1002463e:	4640      	mov	r0, r8
10024640:	40b8      	lsls	r0, r7
10024642:	4b16      	ldr	r3, [pc, #88]	; (1002469c <patch_Telemetry_Sample+0x5d4>)
10024644:	4298      	cmp	r0, r3
10024646:	dd00      	ble.n	1002464a <patch_Telemetry_Sample+0x582>
10024648:	0018      	movs	r0, r3
1002464a:	4320      	orrs	r0, r4
	PMBUS_Set_Command_Word(PMBUS_PAGE_WB_BROADCAST, (uint8_t)PMBUS_CMDCODE_READ_FAN_SPEED_1, (uint16_t)(((TWOS_COMPLEMENT (5, fan_read_exp[PMBUS_PAGE_0]))<<11)
1002464c:	b282      	uxth	r2, r0
1002464e:	2190      	movs	r1, #144	; 0x90
10024650:	20ff      	movs	r0, #255	; 0xff
10024652:	f7dd f937 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
10024656:	0032      	movs	r2, r6
10024658:	40ba      	lsls	r2, r7
	temp = SHIFT_EXPONENT(fan_speed2, -(fan_read_exp[PMBUS_PAGE_0]));  // shift the fan speed by the exponent
	if (temp > 0x3ff) temp = 0x3ff;  // clamp fan speed at mantissa size
	PMBUS_Set_Command_Word(PMBUS_PAGE_WB_BROADCAST, (uint8_t)PMBUS_CMDCODE_READ_FAN_SPEED_2, (uint16_t)(((TWOS_COMPLEMENT (5, fan_read_exp[PMBUS_PAGE_0]))<<11)
			| temp));
1002465a:	4b10      	ldr	r3, [pc, #64]	; (1002469c <patch_Telemetry_Sample+0x5d4>)
1002465c:	429a      	cmp	r2, r3
1002465e:	dd00      	ble.n	10024662 <patch_Telemetry_Sample+0x59a>
10024660:	001a      	movs	r2, r3
10024662:	4322      	orrs	r2, r4
	PMBUS_Set_Command_Word(PMBUS_PAGE_WB_BROADCAST, (uint8_t)PMBUS_CMDCODE_READ_FAN_SPEED_2, (uint16_t)(((TWOS_COMPLEMENT (5, fan_read_exp[PMBUS_PAGE_0]))<<11)
10024664:	b292      	uxth	r2, r2
10024666:	2191      	movs	r1, #145	; 0x91
10024668:	20ff      	movs	r0, #255	; 0xff
1002466a:	f7dd f92b 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>

	call_system_cb(TELEMETRY_SAMPLE);
1002466e:	2000      	movs	r0, #0
10024670:	f7de f8e6 	bl	10002840 <call_module_init_cb+0x13>

}
10024674:	b013      	add	sp, #76	; 0x4c
10024676:	bc3c      	pop	{r2, r3, r4, r5}
10024678:	4690      	mov	r8, r2
1002467a:	4699      	mov	r9, r3
1002467c:	46a2      	mov	sl, r4
1002467e:	46ab      	mov	fp, r5
10024680:	bdf0      	pop	{r4, r5, r6, r7, pc}
10024682:	46c0      	nop			; (mov r8, r8)
10024684:	0000ffff 	.word	0x0000ffff
10024688:	fffffc01 	.word	0xfffffc01
1002468c:	2005d290 	.word	0x2005d290
10024690:	200614d0 	.word	0x200614d0
10024694:	10024850 	.word	0x10024850
10024698:	fffff800 	.word	0xfffff800
1002469c:	000003ff 	.word	0x000003ff
	PMBUS_Set_Command_Word(PMBUS_PAGE_WB_BROADCAST, (uint8_t)PMBUS_CMDCODE_READ_FAN_SPEED_1, (uint16_t)(((TWOS_COMPLEMENT (5, fan_read_exp[PMBUS_PAGE_0]))<<11)
100246a0:	341d      	adds	r4, #29
100246a2:	402c      	ands	r4, r5
100246a4:	02e4      	lsls	r4, r4, #11
			| temp));
100246a6:	b224      	sxth	r4, r4
		value = value >> (exponent);
100246a8:	4640      	mov	r0, r8
100246aa:	4128      	asrs	r0, r5
100246ac:	4b06      	ldr	r3, [pc, #24]	; (100246c8 <patch_Telemetry_Sample+0x600>)
100246ae:	4298      	cmp	r0, r3
100246b0:	dd00      	ble.n	100246b4 <patch_Telemetry_Sample+0x5ec>
100246b2:	0018      	movs	r0, r3
100246b4:	4320      	orrs	r0, r4
	PMBUS_Set_Command_Word(PMBUS_PAGE_WB_BROADCAST, (uint8_t)PMBUS_CMDCODE_READ_FAN_SPEED_1, (uint16_t)(((TWOS_COMPLEMENT (5, fan_read_exp[PMBUS_PAGE_0]))<<11)
100246b6:	b282      	uxth	r2, r0
100246b8:	2190      	movs	r1, #144	; 0x90
100246ba:	20ff      	movs	r0, #255	; 0xff
100246bc:	f7dd f902 	bl	100018c4 <PMBUS_Set_Command_Dword+0x53>
100246c0:	0032      	movs	r2, r6
100246c2:	412a      	asrs	r2, r5
100246c4:	e7c9      	b.n	1002465a <patch_Telemetry_Sample+0x592>
100246c6:	46c0      	nop			; (mov r8, r8)
100246c8:	000003ff 	.word	0x000003ff

100246cc <pmbus_mfr_autogen_init>:
 */
void pmbus_mfr_autogen_init(void)
{


}
100246cc:	4770      	bx	lr

100246ce <AT_TARGET_ENABLE>:
}

void AT_TARGET_ENABLE(PMBUS_PAGE_t loop)
{

}
100246ce:	4770      	bx	lr

100246d0 <regulation_sm_callbacks_init>:
{
100246d0:	b510      	push	{r4, lr}
	Regulation_set_regulation_event_cb(REGULATION_STATE_AT_TARGET_VID, REGULATION_CONTROLS_ENABLE,
100246d2:	4a03      	ldr	r2, [pc, #12]	; (100246e0 <regulation_sm_callbacks_init+0x10>)
100246d4:	2109      	movs	r1, #9
100246d6:	2003      	movs	r0, #3
100246d8:	f7e3 fa42 	bl	10007b60 <Regulation_set_fsw_irq_event_cb+0x2b>
}
100246dc:	bd10      	pop	{r4, pc}
100246de:	46c0      	nop			; (mov r8, r8)
100246e0:	100246cf 	.word	0x100246cf

100246e4 <patch_pmbus_mfr_autogen_init>:

void patch_pmbus_mfr_autogen_init(void);


void patch_pmbus_mfr_autogen_init(void)
{
100246e4:	b510      	push	{r4, lr}
	pmbus_mfr_autogen_init();
100246e6:	f7ff fff1 	bl	100246cc <pmbus_mfr_autogen_init>
}
100246ea:	bd10      	pop	{r4, pc}

100246ec <user_drv_init>:
 * Main entry point of the user application.  Good place to set breakpoint when debugging a patch.
 * This will only get executed a single time prior to configuration loading and before RTOS starts
 */

void user_drv_init(void)
{
100246ec:	b510      	push	{r4, lr}
	memset(&user_data, 0, sizeof(USER_DATA_t));  // ZI the user data
100246ee:	2274      	movs	r2, #116	; 0x74
100246f0:	2100      	movs	r1, #0
100246f2:	480b      	ldr	r0, [pc, #44]	; (10024720 <user_drv_init+0x34>)
100246f4:	f000 f862 	bl	100247bc <memset>

	// this is the initialization of user pmbus commands autogenerated from pmbus spreadsheet
	ptr_mfr_specific_init = (mfr_specific_init_ptr) patch_pmbus_mfr_autogen_init;
100246f8:	4a0a      	ldr	r2, [pc, #40]	; (10024724 <user_drv_init+0x38>)
100246fa:	4b0b      	ldr	r3, [pc, #44]	; (10024728 <user_drv_init+0x3c>)
100246fc:	601a      	str	r2, [r3, #0]

	patch_rom_table.patch_Telemetry_Sample = patch_Telemetry_Sample;
100246fe:	490b      	ldr	r1, [pc, #44]	; (1002472c <user_drv_init+0x40>)
10024700:	2381      	movs	r3, #129	; 0x81
10024702:	009b      	lsls	r3, r3, #2
10024704:	4a0a      	ldr	r2, [pc, #40]	; (10024730 <user_drv_init+0x44>)
10024706:	50d1      	str	r1, [r2, r3]

	// set the pointer funtion in init of regulation state machine to user callback setup for each state
	set_module_init_cb(MODULE_REGULATION, regulation_sm_callbacks_init);
10024708:	490a      	ldr	r1, [pc, #40]	; (10024734 <user_drv_init+0x48>)
1002470a:	2002      	movs	r0, #2
1002470c:	f7e0 f8ee 	bl	100048ec <scratchpad_semaphore_release+0x33>

	add_on_features_init();
10024710:	f7ff fcb2 	bl	10024078 <add_on_features_init>
	regulation_sm_callbacks_init();
10024714:	f7ff ffdc 	bl	100246d0 <regulation_sm_callbacks_init>
	pmbus_mfr_autogen_init();
10024718:	f7ff ffd8 	bl	100246cc <pmbus_mfr_autogen_init>
	patch_pmbus_mfr_autogen_init();

}
1002471c:	bd10      	pop	{r4, pc}
1002471e:	46c0      	nop			; (mov r8, r8)
10024720:	20063800 	.word	0x20063800
10024724:	100246e5 	.word	0x100246e5
10024728:	2005d468 	.word	0x2005d468
1002472c:	100240c9 	.word	0x100240c9
10024730:	2005d074 	.word	0x2005d074
10024734:	100246d1 	.word	0x100246d1

10024738 <memcpy>:
10024738:	b5f0      	push	{r4, r5, r6, r7, lr}
1002473a:	0005      	movs	r5, r0
1002473c:	2a0f      	cmp	r2, #15
1002473e:	d92f      	bls.n	100247a0 <memcpy+0x68>
10024740:	000b      	movs	r3, r1
10024742:	4303      	orrs	r3, r0
10024744:	079b      	lsls	r3, r3, #30
10024746:	d134      	bne.n	100247b2 <memcpy+0x7a>
10024748:	0016      	movs	r6, r2
1002474a:	000c      	movs	r4, r1
1002474c:	0003      	movs	r3, r0
1002474e:	3e10      	subs	r6, #16
10024750:	0935      	lsrs	r5, r6, #4
10024752:	3501      	adds	r5, #1
10024754:	012d      	lsls	r5, r5, #4
10024756:	1945      	adds	r5, r0, r5
10024758:	6827      	ldr	r7, [r4, #0]
1002475a:	601f      	str	r7, [r3, #0]
1002475c:	6867      	ldr	r7, [r4, #4]
1002475e:	605f      	str	r7, [r3, #4]
10024760:	68a7      	ldr	r7, [r4, #8]
10024762:	609f      	str	r7, [r3, #8]
10024764:	68e7      	ldr	r7, [r4, #12]
10024766:	3410      	adds	r4, #16
10024768:	60df      	str	r7, [r3, #12]
1002476a:	3310      	adds	r3, #16
1002476c:	429d      	cmp	r5, r3
1002476e:	d1f3      	bne.n	10024758 <memcpy+0x20>
10024770:	230f      	movs	r3, #15
10024772:	439e      	bics	r6, r3
10024774:	3610      	adds	r6, #16
10024776:	1985      	adds	r5, r0, r6
10024778:	1989      	adds	r1, r1, r6
1002477a:	4013      	ands	r3, r2
1002477c:	2b03      	cmp	r3, #3
1002477e:	d91a      	bls.n	100247b6 <memcpy+0x7e>
10024780:	1f1e      	subs	r6, r3, #4
10024782:	2300      	movs	r3, #0
10024784:	08b4      	lsrs	r4, r6, #2
10024786:	3401      	adds	r4, #1
10024788:	00a4      	lsls	r4, r4, #2
1002478a:	58cf      	ldr	r7, [r1, r3]
1002478c:	50ef      	str	r7, [r5, r3]
1002478e:	3304      	adds	r3, #4
10024790:	42a3      	cmp	r3, r4
10024792:	d1fa      	bne.n	1002478a <memcpy+0x52>
10024794:	2403      	movs	r4, #3
10024796:	43a6      	bics	r6, r4
10024798:	1d33      	adds	r3, r6, #4
1002479a:	4022      	ands	r2, r4
1002479c:	18c9      	adds	r1, r1, r3
1002479e:	18ed      	adds	r5, r5, r3
100247a0:	2a00      	cmp	r2, #0
100247a2:	d005      	beq.n	100247b0 <memcpy+0x78>
100247a4:	2300      	movs	r3, #0
100247a6:	5ccc      	ldrb	r4, [r1, r3]
100247a8:	54ec      	strb	r4, [r5, r3]
100247aa:	3301      	adds	r3, #1
100247ac:	4293      	cmp	r3, r2
100247ae:	d1fa      	bne.n	100247a6 <memcpy+0x6e>
100247b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100247b2:	0005      	movs	r5, r0
100247b4:	e7f6      	b.n	100247a4 <memcpy+0x6c>
100247b6:	001a      	movs	r2, r3
100247b8:	e7f2      	b.n	100247a0 <memcpy+0x68>
100247ba:	46c0      	nop			; (mov r8, r8)

100247bc <memset>:
100247bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100247be:	0783      	lsls	r3, r0, #30
100247c0:	d043      	beq.n	1002484a <memset+0x8e>
100247c2:	1e54      	subs	r4, r2, #1
100247c4:	2a00      	cmp	r2, #0
100247c6:	d03f      	beq.n	10024848 <memset+0x8c>
100247c8:	b2ce      	uxtb	r6, r1
100247ca:	0002      	movs	r2, r0
100247cc:	2503      	movs	r5, #3
100247ce:	e002      	b.n	100247d6 <memset+0x1a>
100247d0:	001a      	movs	r2, r3
100247d2:	3c01      	subs	r4, #1
100247d4:	d338      	bcc.n	10024848 <memset+0x8c>
100247d6:	1c53      	adds	r3, r2, #1
100247d8:	7016      	strb	r6, [r2, #0]
100247da:	422b      	tst	r3, r5
100247dc:	d1f8      	bne.n	100247d0 <memset+0x14>
100247de:	2c03      	cmp	r4, #3
100247e0:	d92a      	bls.n	10024838 <memset+0x7c>
100247e2:	22ff      	movs	r2, #255	; 0xff
100247e4:	400a      	ands	r2, r1
100247e6:	0215      	lsls	r5, r2, #8
100247e8:	4315      	orrs	r5, r2
100247ea:	042a      	lsls	r2, r5, #16
100247ec:	4315      	orrs	r5, r2
100247ee:	2c0f      	cmp	r4, #15
100247f0:	d914      	bls.n	1002481c <memset+0x60>
100247f2:	0027      	movs	r7, r4
100247f4:	001a      	movs	r2, r3
100247f6:	3f10      	subs	r7, #16
100247f8:	093e      	lsrs	r6, r7, #4
100247fa:	3601      	adds	r6, #1
100247fc:	0136      	lsls	r6, r6, #4
100247fe:	199e      	adds	r6, r3, r6
10024800:	6015      	str	r5, [r2, #0]
10024802:	6055      	str	r5, [r2, #4]
10024804:	6095      	str	r5, [r2, #8]
10024806:	60d5      	str	r5, [r2, #12]
10024808:	3210      	adds	r2, #16
1002480a:	4296      	cmp	r6, r2
1002480c:	d1f8      	bne.n	10024800 <memset+0x44>
1002480e:	220f      	movs	r2, #15
10024810:	4397      	bics	r7, r2
10024812:	3710      	adds	r7, #16
10024814:	19db      	adds	r3, r3, r7
10024816:	4014      	ands	r4, r2
10024818:	2c03      	cmp	r4, #3
1002481a:	d90d      	bls.n	10024838 <memset+0x7c>
1002481c:	001a      	movs	r2, r3
1002481e:	1f27      	subs	r7, r4, #4
10024820:	08be      	lsrs	r6, r7, #2
10024822:	3601      	adds	r6, #1
10024824:	00b6      	lsls	r6, r6, #2
10024826:	199e      	adds	r6, r3, r6
10024828:	c220      	stmia	r2!, {r5}
1002482a:	42b2      	cmp	r2, r6
1002482c:	d1fc      	bne.n	10024828 <memset+0x6c>
1002482e:	2203      	movs	r2, #3
10024830:	4397      	bics	r7, r2
10024832:	3704      	adds	r7, #4
10024834:	19db      	adds	r3, r3, r7
10024836:	4014      	ands	r4, r2
10024838:	2c00      	cmp	r4, #0
1002483a:	d005      	beq.n	10024848 <memset+0x8c>
1002483c:	b2c9      	uxtb	r1, r1
1002483e:	191c      	adds	r4, r3, r4
10024840:	7019      	strb	r1, [r3, #0]
10024842:	3301      	adds	r3, #1
10024844:	429c      	cmp	r4, r3
10024846:	d1fb      	bne.n	10024840 <memset+0x84>
10024848:	bdf0      	pop	{r4, r5, r6, r7, pc}
1002484a:	0014      	movs	r4, r2
1002484c:	0003      	movs	r3, r0
1002484e:	e7c6      	b.n	100247de <memset+0x22>
10024850:	100245a0 	.word	0x100245a0
10024854:	10024582 	.word	0x10024582
10024858:	10024588 	.word	0x10024588
1002485c:	1002458e 	.word	0x1002458e
10024860:	10024594 	.word	0x10024594
10024864:	1002459a 	.word	0x1002459a
